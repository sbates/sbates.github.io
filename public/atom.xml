<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bratty Redhead]]></title>
  <link href="http://blog.brattyredhead.com/atom.xml" rel="self"/>
  <link href="http://blog.brattyredhead.com/"/>
  <updated>2013-07-26T15:18:30-05:00</updated>
  <id>http://blog.brattyredhead.com/</id>
  <author>
    <name><![CDATA[Sascha Bates]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shenanigans]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/07/26/shenanigans/"/>
    <updated>2013-07-26T15:11:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/07/26/shenanigans</id>
    <content type="html"><![CDATA[<p><img src="http://blog.brattyredhead.com/images/bw-avatar.png"/></p>

<p>I&#8217;ve been trying to think of a thoughtful and engaging way to tell everyone the news. I feel like I should reflect on the last two years of independent consulting life and offer up some deep thoughts and wise advice.  But I got nothing.</p>

<p>Starting August 5th, I&#8217;ll be an <a href="http://www.opscode.com/">Opscode</a> employee.</p>

<p>The truth is, I&#8217;m super excited to go to work with my friends and eventually move out of the snow-addled state of MN. A big reason I am independent is because I was tired of being an Enterprise employee.  I have always been willing to consider work with small companies but I also want a basis of friendship with my co-workers.</p>

<p>I&#8217;m confident enough about who I am and what I do now that I&#8217;m not interested in what I have been calling &#8220;arranged marriage&#8221; jobs - the kind where you have a few interviews, get really excited and then discover you&#8217;ve walked into a clusterfk egofest.  I don&#8217;t want to have to evaluate companies and people on the basis of a few interviews. I also don&#8217;t want to have to engage in the inevitable dominance posturing and pissing contests that seem to be inevitable with many tech teams.</p>

<p>On the other hand, working with smart people is one of the best things in the world. Being independent means you&#8217;re often working alone and don&#8217;t get to hang with other smart people very much. It&#8217;s why I&#8217;m so enthusiastic about conferences, because that&#8217;s where I get to hang with my smart friends.</p>

<p>You can read in the <a href="http://blog.brattyredhead.com/blog/2011/06/23/another-chapter-done/">very first post</a> on this blog about how transformational it was for me to begin working with open source software, and Chef played a pivotal role in that.  I&#8217;ve worked with the tool now for over 3 years and I love it.</p>

<p>While I do love the product, what draws me to Opscode is their attitude about culture, both internally and the community. <a href="https://twitter.com/search?q=%23hugops&amp;src=typd">HugOps</a> is a real thing and I love that it&#8217;s a lifestyle choice. Between this and the fact that I like without reservation every Opscoder I&#8217;ve met makes this the beginning of an exciting adventure for me.</p>

<p>I expect shenanigans to ensue almost immediately.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cleaning Up The Clubhouse]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/07/03/cleaning-up-the-clubhouse/"/>
    <updated>2013-07-03T15:10:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/07/03/cleaning-up-the-clubhouse</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been a bit reluctant to enter this discussion on my blog; partly because there are some <a href="http://rachelbythebay.com/w/2013/03/27/roadblock/">amazing</a>, <a href="http://globalcomment.com/not-so-funny-sam-morrils-rape-jokes-and-female-comedy-fans/">thoughtful</a> <a href="http://www.gamingaswomen.com/posts/2013/06/an-interview-with-jim-sterling-about-sexism-in-game-culture/">posts</a> <a href="http://io9.com/slut-shaming-and-concern-trolling-in-geek-culture-511721655">already</a> that eclipse anything I could say and also because any of these discussions seem to spark a lot of outrage and anger regardless of the actual topic content. That kind of drama is a big turnoff for me.   But I did want to say a few things about a recent experience at devopsdays because it seems to be an angle we aren&#8217;t discussing.</p>

<p>At <a href="http://devopsdays.org/events/2013-mountainview/">devopsdays Silicon Valley</a> this year, one of the breakout sessions was <a href="http://dougireton.com/blog/2013/06/23/encouraging-women-in-dev-slash-ops/">&#8220;Encouraging Women in Dev/Ops,&#8221;</a> led by Doug Ireton, one of the awesome automation engineers at Nordstrom&#8217;s.  I was already dragging from Velocity and hadn&#8217;t planned to go to any sessions, much less yet another &#8220;how do we get more women in tech&#8221; discussion.</p>

<p>If I sound impatient, it&#8217;s because I am a bit.  In general, I don&#8217;t have any really strong opinions on the &#8220;women in tech&#8221; discussions. This is because I feel we have the same discussions over and over again without covering any new ground or making any difference in how people think. This may actually not be a fair feeling as the discussion has certainly changed the way I think. Or, more accurately, it&#8217;s made me think about it.  I don&#8217;t actually think we should be worrying about how to get MORE women in tech as much as how to make it a comfortable place for people who are already here. Take care of that and balance will come eventually.</p>

<h3>Some History</h3>

<p>I entered tech during the 2000s internet boom where any warm body would do and you didn&#8217;t have to be a decent human being to keep your job. I know this because I often was not a decent human being myself. I was grumpy and petulant, at least in my head, and folks from those early days would probably agree (Kiosk level 2 support team who I pissed off in a major way and worked hard to repair that relationship, are you out there anywhere?). I did eventually grow up and become a moderately self-aware decent human being and have even managed to develop some empathy for people outside my direct life experience.</p>

<p>Not only have I worked in Tech most of my adult life, my dad was a wargamer and RPGer. I was exposed to many strains of nerds and geeks growing up and some of the biggest treats of my 8 year old self involved getting to stay up late with the grownups while they played D&amp;D and maybe even being given a character sheet.</p>

<p>I lived in a house with 4 other guys in college where I learned to watch Star Wars and Repo Man on repeat on one TV while playing video games on the second TV until 2am.</p>

<p>What I&#8217;m trying to communicate with this history is that, while there are certainly some women in all of these lifestyle choices (wargames, rpg, tech support, web ops), we make up a small percentage. So I spent my life getting used to being one of very few women in any tech or social group. Sometimes it&#8217;s fine, sometimes it&#8217;s not fine. It largely depends on the company I&#8217;m keeping.</p>

<p>Regardless, I was taught to communicate by social groups who probably shouldn&#8217;t be teaching anything. But I learned early that guys tease and insult when they like you and that you shouldn&#8217;t worry until they are polite, kind or ignore you.  That also became my style of communicating for a long time because that&#8217;s what I knew.   To this day I am comfortable with it. Dick/Boob jokes don&#8217;t bother me. Profanity doesn&#8217;t bother me. It was co-workers on the clock that introduced me to such great things in life as Triumph, the insult comic dog, South Park and all kinds of inappropriately funny youtube videos. Calling me a girl doesn&#8217;t bother me. Calling me a princess doesn&#8217;t bother me because there are plenty of boy princesses out there and I&#8217;ve called them on it.</p>

<p>Things that DO bother me: overt misogyny, hatefulness and guys who constantly bitch at work about how their wife makes their life miserable.  People who won&#8217;t admit there is a problem with &#8220;isms&#8221; in the world because they themselves don&#8217;t perpetuate it or see it. There is a big difference between a dick joke in private with friends/colleagues and making one at a party where you don&#8217;t know people. Context is everything.</p>

<h3>The Effects of  HTFU or GTFO</h3>

<p>To be clear, I&#8217;m not saying I&#8217;ve sailed through life happily making dick jokes. I have experienced a lot of internal turmoil and emotional anguish over all-guy teams that I have been on, especially early in my career where it was still really hard to gain acceptance and professional respect.  But 10 years ago it was HTFU or GTFO. And so that&#8217;s what I did. And when you make that a condition for acceptance, you greatly shrink the available population and personality types who stick around, both men and women.</p>

<p>The modern discussion of sexism (specifically because it relates to me) has taken me from an attitude of <em>&#8220;most of it doesn&#8217;t bother me and I don&#8217;t know why people care&#8221;</em> to <em>&#8220;A lot of perceived exclusionary sexism doesn&#8217;t bother me, but other people have different expectations from their professional lives now; I entirely respect that and will work to make  my professional sphere a welcoming and safe place.&#8221;</em> In order to attract the next generation of women into tech, everyone is going to have to come at least this far in their thinking.  And it&#8217;s not just sexism; it&#8217;s <a href="http://en.wikipedia.org/wiki/Ableism">ableism</a>, <a href="http://en.wikipedia.org/wiki/Genderism">genderism</a>, homophobia, and <a href="http://en.wikipedia.org/wiki/Cissexism">on</a> and <a href="http://en.wikipedia.org/wiki/Discrimination">on</a>.</p>

<p>But to get back to why I&#8217;m bored with the women-in-tech discussion people keep wanting to have, I don&#8217;t see it making a diff and I&#8217;m still getting a big vibe from guys of &#8220;I don&#8217;t do it and I don&#8217;t see it and how is it possibly a problem?&#8221;  I ended up going to the discussion because I really like Doug and wanted to be supportive of his efforts.  In general, it was pretty much what I always hear and it usually boils down to &#8220;we&#8217;re really nice guys and we can&#8217;t find any women to hire.&#8221;  I get that there are not a lot of us out there. BUT…</p>

<h3>Self Awareness is the Key</h3>

<p>My answer to everyone who feels like this, and I gave it to the Nordstrom&#8217;s guys when we talked about it later, is this: work on your own self-awareness. I&#8217;m sure you think you&#8217;re a reasonable person who never had a sexist thought in their life.  I&#8217;m pretty sure this is not true, because even I have made pissy comments about women drivers, although only in the privacy of my own car by myself. But I still think it. And I&#8217;m a woman!</p>

<p>So work on your self awareness. If you really care, go around to every woman in your professional and personal life and ask them to please offer you feedback if they feel you&#8217;ve ever done something sexist or demeaning either to them or in their presence, no matter how trivial it seems. Because I have news for you guys, we don&#8217;t offer that stuff uninvited. We expect to be scoffed at or ignored because so many people think <a href="http://therealkatie.net/blog/2012/mar/21/lighten-up/">sexism is drama</a>. Example: I have a friend I&#8217;ve worked with at two places now and it took me 3 minutes to spit out &#8220;can I offer you some feedback?&#8221; before calling him on the fact that he&#8217;d talked over and for me in a meeting; something I find particularly galling.</p>

<p>None of this is going to get MORE women in tech. But it&#8217;s going to comfort the ones who are already here and word of mouth is a particularly powerful advertiser, as every viral video ever should tell you.  And honestly, I think it&#8217;s going to do more for everyone if we clean up the house first before inviting more women over and asking them to help us clean it up for them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencasts: Context is Everything]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/06/28/screencasts-i-dont-like-them/"/>
    <updated>2013-06-28T15:10:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/06/28/screencasts-i-dont-like-them</id>
    <content type="html"><![CDATA[<p>Yesterday I <a href="https://twitter.com/sascha_d/status/350288099630256128">tweeted</a> in frustration about being confronted with yet another screencast/video when searching for help on the internet.  This has been a growing frustration for me as I branch out away from pure command line/coding tools.</p>

<p>I find help videos in general to be obnoxious. I read and comprehend fast and generally want to skim some text to understand the thing that I&#8217;m looking for.  I find &#8220;new user feature&#8221; videos that we end up from Google and stuff to be especially annoying.</p>

<p>I get that not everyone wants to just figure stuff out, but I generally can figure things out way faster than you can tell me about it.</p>

<p>A few months ago I was writing my first public talk and also using Keynote for the first time. I kept having to search the Internet for answers to questions because (2 years later) I&#8217;m still getting used to the way OSX presents things and am never sure where to look for formatting-type stuff. Something that really set me off was trying to figure out how to make new masters for Keynote. When I looked around, all I could find were videos lasting several minutes on the topic. Seriously.  All I wanted was a paragraph on the general method and maybe a line with the actual tool bar clicks to begin with. Eventually, on the second presentation I worked on, I found what I was looking for. But I was really annoyed by the whole exercise.</p>

<p>On the other hand. I subscribe to <a href="http://www.rubytapas.com">RubyTapas</a>. I find that an appropriate use of a screencast. Similar to a podcast, it&#8217;s a discussion of a complex topic that doesn&#8217;t have an answer at the end.  When I want to figure out how to do something, I want to read about it on stack overflow, not watch a movie. BUT, if I&#8217;m interested in the how and why of a learning topic, then I love a good screencast.  I especially like the short and sweet nature of the RubyTapas because they are not a major time commitment to listen to one.</p>

<p>But if I have a question, and that question has a fairly simple answer like &#8220;click here, here and here and type these things&#8221; I&#8217;m not sitting through a slow moving video to find out the answer.  Yesterday  I was looking for the start command for a tool I&#8217;d just downloaded and, when I clicked on the &#8220;getting started with Tool&#8221; link, it took me to a screencast which is was sent me over the edge and caused that tweet.</p>

<p>It was interesting to me that this is probably my top ever retweeted tweet. I think there&#8217;s an assumption out there that people want video instead of words. I never watch video on news sites either. I hate it. I want to skim stuff. Maybe places making these assumptions should recalibrate. Or maybe those of us who can read and comprehend faster than someone else can talk are actually in the minority? We&#8217;ll probably never know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Toolchaining Part 3: Walking the Package Talk]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/05/24/ruby-toolchaining-part-3-walking-the-package-talk/"/>
    <updated>2013-05-24T03:16:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/05/24/ruby-toolchaining-part-3-walking-the-package-talk</id>
    <content type="html"><![CDATA[<p>This is the third post in a series about managing your Ruby Toolchain. Expect at least one more after this. You can also read:<br/>
<a href="http://blog.brattyredhead.com/blog/2013/05/12/pieces-and-parts-managing-your-ruby-toolchain">Pieces and Parts: Managing Your Ruby ToolChain(part 1)</a> <br/>
<a href="http://blog.brattyredhead.com/blog/2013/05/17/managing-your-ruby-toolchain-part-2-the-package-repo-rant">Managing Your Ruby Toolchain Part 2: The Package Repo Rant</a></p>

<p>Why I rant about package repositories: Static software without a repository is the pebble that becomes an avalanche. So many undesirable behaviors stem from no one owning the package collection.  Read the rant if you want details.  This is a practical discussion, although I&#8217;m not telling you what to do. I&#8217;m just telling you what I&#8217;ve done and what I&#8217;ve seen over the course of my career.  There are many ways to solve this problem. Do what works for you.</p>

<p>This post grew so much that there is one more after it that specifically deals with some toolchaining tools and ideas as well as a few anecdotes on how I&#8217;ve dealt with some of these challenges in the past.</p>

<p>Today we&#8217;re going to talk about:<br/>
<a href="#tarballs">Tarball Orphans vs Artifacts vs Inbetweeners</a>  <br/>
<a href="#internet">The Internet</a><br/>
<a href="#repos">An Approach to Repositories</a>  <br/>
<a href="#packing">Packaging Tarballs</a>  <br/>
<a href="#ruby">Ruby Management</a>   <br/>
<a href="#toolchaining">Ruby Toolchain Management</a></p>

<h2><a id="tarballs">Tarball Orphans</a></h2>

<p>What do I mean when I rant about tarballs? Basically I mean that pile of source you downloaded from the internet, or Tomcat package, JBoss tarball, Ruby source, whatever.</p>

<p>What is exempt from my ranting  wrath? Custom code that you might tar up instead of jar/ear/war.  Anything that changes often shouldn&#8217;t be in our static package repository. Those are places to keep long term, install-once per server software.</p>

<p>When I talk about tarballs, I mean tumbleweed off the internet.  When I refer to compiled code I&#8217;ll use the word <strong>artifact</strong>.  What&#8217;s an artifact? It might be a jar file you bundle with your deployed code. It might be a war file. It might be a tar of ruby code Or database artifacts.  Anything that&#8217;s your stuff, we don&#8217;t put that into package repositories.  We put it into artifact repositories like Artifactory and Nexus. People also use S3 storage to store and retrieve artifacts.</p>

<p>Some things may not be easily categorized. Newer products get frequent updates that may require frequent patches or deployments. For example, I worked with a team that implemented Basho&#8217;s <a href="http://basho.com/">Riak</a> which they updated frequently and ended up engaged in a disagreement with Ops on how often they could update it. The ops team wanted to restrict it to quarterly and the devs wanted much more frequently. This sort of management requires a custom solution that may be package-based or not.</p>

<h2><a id="internet">The Internet</a></h2>

<p>If your infrastructure has free access to the internet, that&#8217;s awesome. Many infrastructures have limited or no access to the internet.  Often the reasons for this seem silly.  But sometimes you can&#8217;t fight city hall, or you can but you need to save your fights for the life or death kind.  Your servers don&#8217;t need the internet to survive. Or they should not.</p>

<p>Eventually you will find yourself needing stuff from the Internet. In order to work within restrictions, you can set up a <a href="http://en.wikipedia.org/wiki/Bastion_host">Bastion</a> host or AWS VPC infrastructure that can call out to the internet in order to create private mirrors of any repositories you need.  You can follow the slightly more difficult path of setting up an internal server that contains your repos that you need to sync in a way that doesn&#8217;t have direct access to the internet.</p>

<p><strong>Internet as Troublemaker</strong><br/>
Internet access brings its own set of problems as well. If you aren&#8217;t specific about package versions, with every server provision you could have slightly different versions of things installed.  This is a problem because it can cause erratic behavior across your infrastructure. If you have 1000 nodes built over the course of six months, each build wave can introduce incremental differences. When you control the packages in your internal repos, you exert a stabilizing effect, which is a good way to control your system without making it brittle.</p>

<p>Even if sloppy package management doesn&#8217;t actually cause issues, it will be a suspect in any intermittent, mysterious problems. Picture an outage conference bridge including execs. Now envision yourself explaining to them how this mismatch isn&#8217;t a problem. Can you envision any explanation that doesn&#8217;t make you sound like a dolt?</p>

<p><strong>Example</strong>: A few years ago JBoss 5 shipped with a bug that was a major performance blocker but difficult to track down. It was later fixed in a minor patch release. Imagine having a JBoss package block that just says <code>package "jboss" {action :install}</code> and using an internet repo to install it. 6 months later you provision 100 servers from your trusty internet repo and over your peak season, the bug triggers but everything is weird because it&#8217;s only a problem on some servers.  Imagine tracking this down. (Yes this is a flawed example b/c as far as I know, there&#8217;s no internet repo with a JBoss rpm)</p>

<p>If you&#8217;re a dev and you think this isn&#8217;t a problem, try chatting with a friend in the sysadmin/ops area before you poo-poo. If you&#8217;re a sysadmin and you think this isn&#8217;t a big deal, may we never be responsible for the same infrastructure.</p>

<p><strong>Be Conservative.</strong> As a rule it&#8217;s ok to use external signed key repositories for your base OS packages as those shouldn&#8217;t change. Tread carefully even with patch/update servers to ensure homogenous installs and any packages acquired from other internet repos (like EPEL) should be installed with explicit versions.</p>

<p><strong>Adopt Orphans</strong> Don&#8217;t let Internet-sourced software roam around your infrastructure unsupervised. If you need a package from the internet, it should be easy enough to download and insert into your custom repository. There are several tools for managing repositories. For Enterprise Linux, <a href="https://github.com/cobbler/">Cobbler</a>, the provisioning and infrastructure management tool has repository management and mirroring. My new favorite thing for this though is a tool called <a href="http://pulpproject.org/">Pulp</a>, an open source project by Red Hat.  If you prefer simplicity, you can just install a web proxy and use a command line tool like <code>createrepo</code> to manage your yum repos.</p>

<p><strong>Don&#8217;t assume I can talk to the Internet.</strong> When it comes to configuration management tools, I find it in bad taste to write a module or cookbook intended for the community with an Internet dependency.  If you have to write one, label the dependency in large font.</p>

<h2><a id="repos">An Approach to Repos</a></h2>

<h3>OS Packages</h3>

<p>If you&#8217;re going to set up repositories, consider a collection like this list.</p>

<p><strong>Base</strong> - base EL install repo  - This is generally straight up ISO content<br/>
<strong>Patch</strong> - repository containing patches<br/>
<strong>EPEL</strong> - EL Extras repo mirror<br/>
<strong>Custom</strong> - repository containing all the custom packages I need that I&#8217;ve either crafted myself or downloaded</p>

<p><strong>Purity of Purpose:</strong> Always keep your base and patch repos pure. Don&#8217;t let people just dump random packages into a Base OS collection. You&#8217;ll never know what was supposed to be there and what was added later.</p>

<p><strong>Prioritization and Specificity:</strong> If you have two versions of a package in different repos, either be specific when installing or configure a priority for each repo.</p>

<h3>Rubygems</h3>

<p>This is where you get/put your gems. Gem is the package manager for Rubygems. You either need to connect to the internet to get all of these things or you need internal package repos/mirrors.  See this <a href="http://davidmoulton.me/2011/02/07/create-a-private-gem-repository.html">blog post</a> by David Moulton for how easy it is to set up a rubygems repo.</p>

<h3>Artifacts</h3>

<p>This is where your deployment artifacts, jar, war, ear files should be contained; a tool where it&#8217;s easy to retreive them programmatically. I have seen people use <a href="http://www.sonatype.org/nexus/">Nexus</a>, <a href="http://www.jfrog.com/">Artifactory</a> and even S3 to store artifacts. If you&#8217;re not a java shop, you may not need something this complex. My major experience is with Java shops.</p>

<h3>YMMV</h3>

<p>There are many ways to craft your infrastructure. Having package repositories is an advantage because they make it really obvious to everyone in your organization where to look for software and where they should put software they need.</p>

<p>The important thing to keep in mind here is that, especially if you&#8217;re in the Enterprise, you aren&#8217;t designing for yourself or just one team. This will balloon out to include dev teams using your tools. In order to deploy their app, the devs will test using VMs provisioned by your infrastructure and they should be taking advantage of your beautiful repos to deposit their extra software packages.  Your team may even be administering the VM infrastructure.</p>

<p>A major goal to strive for is for all VMs and servers to be provisioned the same way in all environments, desktop to production. You make this easiest and more likely to happen when you make it easy to interact with software repositories.  If it&#8217;s not easy, other teams will &#8220;figure something out&#8221; which will likely outrage you when you discover it.</p>

<h2><a id="packing">Practical Tarball Management</a></h2>

<h3>Avoid Compiling From Source</h3>

<p>Believe me when I say that you <strong>do not</strong> want to compile Ruby from scratch every time you build a server. The more automation achievements you unlock, the easier it becomes to use ephemeral VMs.  In Dev, people should be popping up and killing VMs all the time. If it takes 10 minutes to build a server, they won&#8217;t be doing this, dev VMs will have <a href="http://workstuff.tumblr.com/post/50911984233/some-tips-on-getting-started-with-vagrant-and-chef">major cruft buildup</a> and dismay will ensue when people realize they can&#8217;t actually reproduce their dev VM.</p>

<h3>Turning a Tarball into a Package</h3>

<p>How do you get packages for your repos when all you have is a pile of tarballs? If you&#8217;re brilliant, write a package spec for it. If you&#8217;re like the rest of us, you use <a href="https://github.com/jordansissel/fpm">FPM</a>.  Even if you are in a situation where you can&#8217;t have a package repo, you can at least create and store packages which will speed up installation and simplify implementation.</p>

<p><a href="https://github.com/jordansissel/fpm">FPM</a>: Learn it, love it, live it.</p>

<h3><a id="ruby">Ruby Management</a></h3>

<h3>Ruby Source</h3>

<p><strong>1.8.7 is EOL</strong><br/>
First, on the topic of existing packages, as <a href="http://www.ruby-lang.org/en/news/2011/10/06/plans-for-1-8-7/">announced in October of 2011</a>, Ruby 1.8.7 is officially end of life and won&#8217;t even get security updates after June 2013.  <em>Just say no to the supplied 1.8.7 packages</em> on your Enterprise Linux(EL) and the one that comes installed with OSX. No really, never touch it. If you&#8217;re using it, start seriously considering how to move on.</p>

<p><strong>System Ruby</strong><br/>
Whatever else you&#8217;re doing, your servers will all want a system Ruby. It&#8217;s possible to get along without this(see omnibus in subsequent sections), but especially in dev, people will be shocked and dismayed when there&#8217;s no easily accessible Ruby.  So get you some Ruby, not from the ancient EL repos, but get the source tarball from <a href="http://www.ruby-lang.org/en/">Ruby-Lang.org</a>.</p>

<p>Why do I tell you this obvious thing? We had the brilliant idea of switching out our compile-every-time system ruby install with just using the embedded Ruby that ships with Chef client. Never do this. The trouble is that your Ruby install is not just an executable, but a name space for installing gems and related software. This is is why Chef ships in an omnibus in the first place: to avoid dependency hell and version conflicts.  The other problem with this idea is that you are still lacking a system Ruby. You either have symlink to the Ruby executable or people have to know where to look for. So install a system Ruby independent of any other software.</p>

<p>Next make a Ruby RPM. RPMs are hard. Luckily <a href="https://twitter.com/ianmeyer">Ian Meyer</a> is watching out for us and has a <a href="https://github.com/imeyer/ruby-1.9.3-rpm">defined, working spec</a> from which to build an RPM. I&#8217;ve made this Ruby RPM for two different clients and it compiled without a hitch.</p>

<p>Once you create an RPM, put it into your custom package repo so that you can yum install ruby-1.9.3 or install it via cookbook later.</p>

<p>I repeat this series of steps for the Rubygems tarball, except using <a href="https://github.com/jordansissel/fpm">FPM</a> to package it.  Then they go in my custom repo where the custom repo has a higher priority than my base repo and my recipe just has a package block to install Ruby and Rubygems. It takes about 30 seconds instead of the 5 minutes it takes to compile Ruby from scratch.</p>

<p>If you use Ubuntu, well, they are cooler than EL and have <a href="http://packages.ubuntu.com/quantal/ruby1.9.3">Ruby-1.9.3 packages</a>.</p>

<h2>Where Do We Go From Here?</h2>

<p>An important part of toolchaining is maintaining control of the supply chain.  The way we do that is by creating space for packages and actively managing that space. It should be freely accessible to both deposit and receive software. Don&#8217;t manage things by locking people out, but by making it easy to use and providing guidelines for usage. Most people want to do the right thing. When you make the right thing easy to do, more people will do it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Your Ruby Toolchain part 2: The Package Repo Rant]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/05/17/managing-your-ruby-toolchain-part-2-the-package-repo-rant/"/>
    <updated>2013-05-17T09:23:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/05/17/managing-your-ruby-toolchain-part-2-the-package-repo-rant</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong> Use package repos for all your static software</p>

<p>Last weekend I wrote a <a href="http://blog.brattyredhead.com/blog/2013/05/12/pieces-and-parts-managing-your-ruby-toolchain/">blog post</a> that started exploring standards for managing your Ruby toolchains. To review, I had a query from someone on how to cope with the dynamic nature of Ruby-based tooling and managing a Chef infrastructure. and the fact that you don&#8217;t always want to go to the internet to get stuff, it&#8217;s a pain to be compiling things on servers all the time AND to do that, you need a compiler which is regarding as a Bad Thing<sup>TM</sup> in Production.</p>

<p>The question came to me via a talk I did at Chef conf and I&#8217;m going to use Chef examples, but, unless someone tells me different, I&#8217;m going to come down on the side of you can use this advice with Puppet and CFEngine and any other CM tool out there. It works without CM too, but why would you ever?</p>

<p>In this blog post, I want to talk about why I am so adamant about package repositories and offer some real world examples.  I pick on Tomcat a lot here. Nothing against Tomcat. It&#8217;s something most people understand and that I have also had personal experience with it not being managed as a package and creating much distributed pain.</p>

<h2>Broken Record Much?</h2>

<p>I can&#8217;t shut up about package repos. Why am I so passionate about the need for all package repos all the time and to have a team actively managing and grooming them?</p>

<p>As part of the decentralization of Ops teams and the rise of DevOps, we now see multiple autonomous teams simultaneously working on similar projects but not collaborating or communicating on infrastructure.  It behooves the infrastructure managers, whether that&#8217;s ops or devops or the tools team or a central collaborative group comprised of reps from all the teams, to own and groom a collection of package repositories.</p>

<p><strong>But Why?</strong> <br/>
With the rise of self-service, all you can eat virtual machines, development teams are expected and want to be independent from the corporate server supply chain.  Unfortunately this also decouples them from people they depend on: infrastructure and middleware experts(Yes Ops, that&#8217;s you). They may sail gayly on and do their best or trudge forward grudgingly, resenting all of the extra work they now have to do because the Enterprise wants to be &#8220;like a startup.&#8221; Either way, they&#8217;re going to move forward, and when you don&#8217;t offer them ways to easily use software, they&#8217;ll figure out ways to [cope][]; ways that will horrify you when you discover them.</p>

<p><strong>I work at a startup because Enterprise is stupid like that.</strong><br/>
Nope. It&#8217;s not only the Enterprise that needs to fear the chaos of unmanaged, difficult to use infrastructure. Say your whole startup is fewer than 20 people? You&#8217;re the &#8220;devops engineer&#8221; and you work with a 5 person dev team.  The dev team may or may not include you in everything.  You might not know of actions they&#8217;ve taken to [cope][] with problems you don&#8217;t even know they have. They don&#8217;t realize there could be a simple solution to their problems because they are brilliant startup devs and they will just figure it out.  Then they&#8217;ll hand you their giant shiny mud pie and you will cry because you could have saved them a bunch of work with a few well placed repos and a web proxy.</p>

<p>Package repos create a beautiful garden where you static software can flourish and discourages tarball weeds from springing up in the cracks everywhere.</p>

<p><strong>If you establish a well known, central location for packages, people will know to look there first for an existing package that meets their needs. And they will ask to place packages they need there as well.</strong></p>

<p>Ex: In the situation where someone thinks</p>

<blockquote><p><em>&#8220;I need Tomcat7 and Red Hat only ships with Tomcat5&#8221;</em></p></blockquote>

<p>Their correlating thought will NOT be</p>

<blockquote><p><em>&#8220;I should go download that from the internet and store it on the jumphost&#8221;</em></p></blockquote>

<p>but instead</p>

<blockquote><p><em>&#8220;I wonder if we have that in our custom repo?&#8221;</em></p></blockquote>

<p>or in an even more mature organization</p>

<blockquote><p><em>&#8220;I should include our Tomcat cookbook in my runlist and override the attributes that are unique for my situation&#8221;</em></p></blockquote>

<h3>When you make package repos easy to access and use, you</h3>

<ul>
<li>Eliminate several slightly different copies of software (ex: tomcat) floating around your infrastructure.</li>
<li>Eliminate several slightly different versions of packages deployed to Production.</li>
<li>Discourage placing random tarballs in version control or Chef cookbook files.</li>
<li>Make your configuration management tool easy and intuitive to use.</li>
</ul>


<h3>The Problem With Tarballs - a Real Life Example</h3>

<p>Config management tools are designed to be idempotent, which means they only do things once and ensure things look the same regardless of how many times you run the the same process.  <em>Tarballs subvert the use of configuration management primitives</em>, requiring the use of non-idempotent execute blocks to manipulate them.  Real world example:</p>

<p>Without a package repo in place, this happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;/tmp/tomcat7.tar.gz&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;https://www.sometomcaturl.com&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:tomcat</span><span class="o">][</span><span class="ss">:home</span><span class="o">]</span><span class="si">}</span><span class="s2">/bin&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;extract_tomcat&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;tar xf /tmp/tomcat7.tar.gz&quot;</span>
</span><span class='line'>  <span class="n">cwd</span> <span class="s2">&quot;opt&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:tomcat</span><span class="o">][</span><span class="ss">:home</span><span class="o">]</span><span class="si">}</span><span class="s2">/bin&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">only_if</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;/tmp/tomcat7.tar.gz&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or this utter travesty:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bash</span> <span class="s2">&quot;install_tomcat6&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">tomcat_version_name</span> <span class="o">=</span> <span class="s2">&quot;apache-tomcat-</span><span class="si">#{</span><span class="n">node</span><span class="o">.</span><span class="n">tomcat</span><span class="o">.</span><span class="n">version</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">tomcat_version_name_tgz</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tomcat_version_name</span><span class="si">}</span><span class="s2">.tar.gz&quot;</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">   curl --proxy https://aproxy.com:8080/ --user user:pass https://myartifactoryurl.com/artifactory/ext-release-local/apache-tomcat/apache-tomcat/#{node.tomcat.version}/#{tomcat_version_name_tgz} -o /tmp/#{tomcat_version_name_tgz}</span>
</span><span class='line'><span class="sh">   tar -zxf /tmp/#{tomcat_version_name_tgz} -C /tmp</span>
</span><span class='line'><span class="sh">   rm /tmp/#{tomcat_version_name_tgz}</span>
</span><span class='line'><span class="sh">   mv /tmp/#{tomcat_version_name} #{node.tomcat.install_path}</span>
</span><span class='line'><span class="sh">   chown -R #{node.tomcat.run_user}:#{node.tomcat.run_group} #{node.tomcat.install_path}</span>
</span><span class='line'><span class="sh">   chmod -R 755 #{node.tomcat.install_path}</span>
</span><span class='line'><span class="sh">   rm -rf #{node.tomcat.install_path}/webapps/ROOT</span>
</span><span class='line'><span class="no">    EOH</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that they very carefully delete that tarball when they are done, ensuring that it will be re-downloaded 30 minutes later on the next run. They also untar the file and then move it to the install location without checking to see if anything is already there.  Again, 30 minutes later the entire process happens again despite whatever is already there.</p>

<p>Now look at what happens with a package repo in place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s1">&#39;tomcat7&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may have to customize config files and init scripts, but this is a far simpler and less error prone way to install the base software.</p>

<p>In this case, Chef knows what OS you are using, what your package manager should be, repository connection details and how to install the package. Puppet does the exact same thing. So does every other config management system in the history of ever.  The less code you have to write and the less verification code you have to write, they happier you&#8217;ll be and the people who come after you will be.</p>

<h3>The End</h3>

<p>I&#8217;ve heard a lot of complaints from ops and tools folks that devs do &#8220;crazy&#8221; stuff and they are much affronted that the devs don&#8217;t seem to understand the unpublished rules of operationalizing apps and the best way to use tools, and omg did you see the travesty of a Tomcat cookbook they wrote?</p>

<p>I have spent years on ops teams, tools teams and automation teams now. I have been one of those self-righteous, affronted peeps.  This behavior doesn&#8217;t scale, yo.</p>

<p>One of the best messages that DevOps has for all of us is, if you don&#8217;t like the way someone&#8217;s doing something, talk to them and find out why. You&#8217;ll probably learn that there were great reasons for everything, including &#8220;I didn&#8217;t know how to do it, Chef is hard, Tomcat is hard, and I was just a Java developer until you guys started making me do all this automation stuff without telling me the rules or offering guidelines, so I copied another team&#8217;s Tomcat cookbook. I had no idea it&#8217;s crap. It installs Tomcat and that&#8217;s all I care about.&#8221;</p>

<p>Indeed. That&#8217;s all they care about. If you care about more than just the install, maybe you should reach out and offer to partner with them on the parts you care about.  Don&#8217;t like the way devs are building application infrastructure? Well maybe you should do it for them. Provide them with a consistant VM build from a stable package repo and possibly infrastructure cookbooks with sane defaults and overrideable parameters. Chances are good devs don&#8217;t like recreating that crappy Tomcat wheel any more than you like them doing it. It&#8217;s likely they will be pathetically grateful because, while they are coping with the tasks they&#8217;ve been handed, they don&#8217;t really know what to do in detail and researching JVM tuning parameters is not their idea of a good time.</p>

<p>Why am I telling you this story? Because I believe that a major piece of your infrastructure stability is created with package repos. Making them easy to find, use and contribute to will help smooth any number of peripheral problems you are trying to solve.  In my next post I&#8217;ll talk about practical considerations for repositories, packages and toolchains.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pieces and Parts: Managing Your Ruby Toolchain (part 1)]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/05/12/pieces-and-parts-managing-your-ruby-toolchain/"/>
    <updated>2013-05-12T13:12:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/05/12/pieces-and-parts-managing-your-ruby-toolchain</id>
    <content type="html"><![CDATA[<p>I recently received an email from someone who attended my <a href="http://www.youtube.com/watch?v=pHmU0aNkENc&amp;list=PLrmstJpucjzXNMLcI5X-EjirpDd-SITd3&amp;index=28">ChefConf talk</a> and asked me to expand on a few things. As I started to answer the email, I could see it was going to turn into a dissertation, so I migrated it over into a blog post.  As I started to write the blog post, it seemed to grow into a book, so now I&#8217;ve decided to break it down into multiple posts.  In this post I&#8217;ll try to summarize the question and situational environment and cover the easiest answers first: scripting languages and RVM.</p>

<p><strong>The Question</strong><br/>
Given the dynamic nature of Ruby tooling and the uncertainty of internet connections, and given that I work in the Enterprise, how should I design my supporting infrastructure and should I make Ruby my default scripting language?</p>

<p><strong>The Situation</strong><br/>
Situated in the Enterprise, working with Red Hat/CentOS Enterprise Linux(EL).</p>

<p><strong>Concerns</strong>  <br/>
* Rapidly changing versions of gems and software on the internet<br/>
* A constant need to download and compile Ruby (also compilers in production)<br/>
* The dynamic nature of downloading an RVM script from the internet on every install<br/>
* No connection to the internet (I&#8217;m not sure if this was a concern of his, but I&#8217;m betting it&#8217;s one of yours)</p>

<p>Let&#8217;s look at our major parts, shall we? In this set of posts we&#8217;ll cover <br/>
* <a href="#script">Scripting Languages</a> <br/>
* <a href="#rvm">RVM</a><br/>
* [Package Repositories]  <br/>
* [Package Versions]   <br/>
* [Ruby Management]     <br/>
* [Rubygems]</p>

<p><a id="script"><strong>Scripting Languages</strong></a><br/>
The question was, should we go all in on Ruby as a scripting language? My answer to that is, unless everyone loves Ruby, that&#8217;s probably an unnecessary hardship to impose while also trying to adopt Chef.  Generally you find some combination of Shell, Python, Perl or Ruby on most enterprise server systems. I think you should script in the language that works best for you, where &#8220;works best&#8221; is a combination of what you&#8217;re comfortable with and what will best suit your immediate need.</p>

<p>Honestly I think we&#8217;ll never move entirely away from Shell scripting and that&#8217;s ok. It&#8217;s easy to learn and suits functional tasks like cron jobs and other server-specific work. Do I think you should have a script suite in 4 different interpreted languages? Well, no. If it were me, I&#8217;d pick Shell and Ruby for my options. But there&#8217;s no reason it can&#8217;t be Shell and Python or any other combo.</p>

<p>Me? I love Ruby and have an irrational dislike of Perl that stems from my early days in ops dealing with travesties of unreadable scripts. So I like Ruby first and Shell second, Python third and Perl never.  But it&#8217;s hard enough learning a new tool like Chef. Don&#8217;t impose artificial constraints on your team.</p>

<p>Also, Your devs are probably already programming in Java or C or whatever. Over time most devs pick up a smattering of shell. If you force Ruby on them too it&#8217;s likely to breed resentment.</p>

<p><a id="rvm"><strong>RVM</strong></a> <br/>
While I&#8217;m not an expert on <a href="http://rvm.io">RVM</a> and other Ruby managers, I have heard that it&#8217;s not meant to be a server tool.  I do use RVM for workstation development and I&#8217;ve used <a href="http://github.com/sstephenson/rbenv/wiki">Rbenv</a> as well. I don&#8217;t mind compiling Ruby from scratch when installing it locally although I will love it when RVM gets precompiled rubies for OSX.</p>

<h5>A Slight Digression on Workstation Automation</h5>

<p>I&#8217;ve written workstation automation using Fletcher Nichol&#8217;s <a href="http://github.com/fnichol/chef-rvm">chef-rvm cookbook</a>.  A frustrating problem I have run into is that RVM undergoes frequent development and at first I had people coming to me because the workstation toolchain install wouldn&#8217;t work and it was almost always because the RVM version had changed and something was now wonky in the settings or install chain. So I started pinning the RVM version to install with occasional revisits to bump the version when I could.</p>

<p>If you want to look at workstation automation for OSX 10.8 try a couple of these repos:</p>

<ul>
<li><a href="http://github.com/pivotal-sprout/sprout-wrap">Sprout-wrap</a> - This used to be Pivotal Workstation and is now basically an instruction page for getting going with Soloist</li>
<li><a href="http://www.solowizard.com">SoloWizard</a> - a browser based checklist that will assemble a chef solo provisioner for your workstation.</li>
<li>Joshua Timberman&#8217;s workstation-chef-repo and mac_os_x-cookbook for his personal collection of workstation automation</li>
<li><a href="http://github.com/blt04/puppet-rvm">Puppet-RVM</a> - Puppet module for installing and managing RVM</li>
<li><a href="http://boxen.github.com/">Boxen</a> - A tool for automating OSX with Puppet. Links to a blog post with details.</li>
</ul>


<p>I have written workstation automation but I don&#8217;t maintain it these days and I&#8217;ll probably try Soloist when I get my next new Mac.</p>

<p><strong>TL;DR</strong>:<br/>
* Use RVM on workstations not servers  <br/>
* If you&#8217;re automating for many people over time, pin your RVM version</p>

<p><strong>Wrap Up</strong>
To keep the blog post readable, this is all I want to discuss in this first post, but I&#8217;m about to publish Part 2 as well: a rant about package repos. I&#8217;m extremely interested in feedback on this series as I was only half joking about writing a book, though it would likely be an online doc of some kind. This type of discussion evolves too quickly to commit to paper.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minneapolis - St Paul Infracoders Meetup Recap]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/05/07/minneapolis-st-paul-infracoders-meetup-recap/"/>
    <updated>2013-05-07T10:34:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/05/07/minneapolis-st-paul-infracoders-meetup-recap</id>
    <content type="html"><![CDATA[<p>Last night we had a fun second meetup of the <a href="http://www.meetup.com/Twin-Cities-Infracoders">Twin Cities Infracoders group</a>.  On the docket were presentations and demos for Vagrant and Sensu.  We had about 18 people show up and a lively discussion ensued on why you&#8217;d want to use something like Vagrant and implementation strategies.</p>

<p>Most of us have partnered with development teams who have asked for things that are difficult to provide or unwise and one of the best use cases for Vagrant is the ability to hand someone a development environment homogenous to the team and easy to troubleshoot. It&#8217;s homogenous because everyone uses the same base OS box file and also uses the same provisioner to create the environment, whether that&#8217;s Chef, Puppet or Bash scripts or anything else. It also shortens time required to bootstrap a new team member.</p>

<p><a href="http://www.linkedin.com/in/mpgoetz">Mike Goetz</a> and <a href="http://www.linkedin.com/in/thomasduffield">Tom Duffield</a> gave us a great compressed Wordpress install demo on a local VM with Vagrant and Chef. Then they gave us a second demo of spinning up two ec2 instances to separate the front and back end pieces of Wordpress.</p>

<p>After Vagrant, we ran through some Sensu slides and looked at some basic info about Sensu.  There were technical difficulties around the demos we were working on so demoing was minimal but discussion around why Sensu, how Sensu and when you might switch was great and we&#8217;re looking forward to a more detailed demo at next month&#8217;s meetup.</p>

<h5>Here is the collection of tools and links from last night:</h5>

<p><a href="http://www.vagrantup.com/">Vagrant</a><br/>
<a href="http://docs.vagrantup.com/v2/plugins/index.html">Vagrant Plugins</a><br/>
<a href="http://sensuapp.org/">Sensu</a><br/>
<a href="http://slides.sensuapp.org/">Sean Porter&#8217;s Slides</a><br/>
Wordpress Demo(this link will be available shortly)</p>

<h5>Coming up:</h5>

<p>Next month&#8217;s meetup, hosted again at the Nerdery, will be a presentation on using Selenium for automated testing and QA as well as our enhanced Sensu Server and client nodes deployed with Vagabond on LXCs inside a Vagrant VM.  I hope we get a great turnout.</p>

<p>On another note, I have been talking lately about how I want to organize a Chef hackday. After last night&#8217;s discussions around tooling and workflow, I think it might be nice to instead do a tool-agnostic Workflow Tooling hack and help day. Many of us have gotten workflows configured successfully, but depending on your experience beating on the Ruby toolchain, it can be challenging the first couple times you do it.  The Nerdery said they would probably be willing to host and I was thinking about asking CoCo Minneapolis if they had any interest in hosting.</p>

<p>I&#8217;ll post up a question in the meetup group about location and date preferences to see if I get enough interest to make it a thing. I&#8217;ll also send someone to shill at the monthly DevOps meetup that I can never attend due to my work travel schedule.</p>

<p>If you haven&#8217;t made it out to an Infracoder meetup yet, I hope you because we are having some great tech discussions and getting to hear about other people&#8217;s uses cases for things is fascinating. Also, the Nerdery takes super great care of us and feeds us Pizza for dinner.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devops Consulting: Why I Don't]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/04/05/devops-consulting-why-i-don-slash-t/"/>
    <updated>2013-04-05T20:33:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/04/05/devops-consulting-why-i-don-slash-t</id>
    <content type="html"><![CDATA[<p>I had an <a href="https://twitter.com/sascha_d/status/319889574367215616">interesting exchange</a> with <a href="https://twitter.com/adamhjk">Adam Jacob</a> yesterday on Twitter around devops consulting. It&#8217;s a topic I&#8217;ve discussed often with friends as we work out how to spread the devops message in our consulting adventures.  After the Twitter chat, I&#8217;m motivated to say a few words about devops consulting, not because there was an argument, but because it&#8217;s something I&#8217;ve thought about often since I started independent consulting and I think it&#8217;s important.</p>

<p> The twitterings began with me trolling Adam on a topic about which I learned my first, best lessons from him.  Two years ago, my ideas around devops were still mostly unformed when I saw him give his <em>&#8220;What is Devops&#8221;</em> and <em>&#8220;The No Assholes Rule&#8221;</em> vignettes at Velocity. These two 5 minute segments clarified several nebulous thoughts I&#8217;d been having and form the base for how I approach devops today.</p>

<p>My trolling quickly transformed into an exchange as to whether devops consulting is a valid thing.  Here&#8217;s my take:</p>

<h4>Devops is The New Black</h4>

<p>As far as toolmakers, tool-consumers and recruiters are all concerned, devops is the new black. I get frustrated with the &#8220;slap a devops on it and they will come&#8221; attitude we see prevailing. It makes me want to never use the word <em>&#8220;devops&#8221;</em> to describe anything ever because of things like this:</p>

<ul>
<li><p>If it&#8217;s a tool for scaling or automation or monitoring or cloud, it&#8217;s now a &#8220;devops tool&#8221;.</p></li>
<li><p>If you have a job for some poor schlub to do production support for the dev team, you call it &#8220;looking for a devops engineer with build experience.&#8221;</p></li>
<li><p>A tooling company has a giant virtual sticker on the website: &#8220;Designed by devops.&#8221;</p></li>
<li><p>If you want to get some other poor schlub to join your overworked ops team you call it a &#8220;devops engineering&#8221; position but it&#8217;s really just another day in the life of duct-taping together prod.</p></li>
</ul>


<p>I already hear colleagues succumbing to the terminology &#8220;devops Tool&#8221; because it&#8217;s a phrase understood by (or at least familiar to) upper management and business users. I can even see the day when I give in and start calling things devops tools. This makes me sad.</p>

<h4>Emo Devops</h4>

<p> Call me cynical, but this sort of devaluation discourages me and has turned me into something of a hipster goth. You know, the girl in all black with the black nail polish listening to Bauhaus and denying she&#8217;s goth because she transcends labels in her non-originality. I can make fun of this girl because I was her in high school.</p>

<p> But as I see tool companies and recruiters slapping devops across everything and large companies begging for the devops panacea, I become less and less inclined to talk about devops and the hipster goth in me is damned if she&#8217;s going to cash in on all the quick bucks of devops consulting.</p>

<h4>Devops Consulting - Why I Don&#8217;t</h4>

<p>Last year I had a company try to hire me as a devops consultant, but the very idea made me shudder. It felt utterly pretentious even though they had the best of intentions and were knowledgeable about devops.  My business card says Devops Enthusiast. That&#8217;s it. I love it and I try to live it every day I walk into an office, whether it&#8217;s my home office, a client office or any other place with people in it.</p>

<p>But my business card will never say Devops Consultant. Why not?</p>

<p><em>Devops Isn&#8217;t a Deliverable</em> - When I get done with you, you don&#8217;t have a devops. It&#8217;s possible that the things we&#8217;re working on will bring you closer to a lifestyle and culture that is devops. And that&#8217;s super.  Working at scale demands extraordinary feats of technical prowess, but it also demands empathy and trust, key components of devops culture. I expect this to be a natural byproduct of my tenure, not the thing I craft.</p>

<p><em>Consultants Have No Moral Authority</em> - This is the classic water and horse thing. You can hire someone to tell you how to do devops, but unless everyone is signed on and excited, it&#8217;s going to be the consultant and the person who hired the consultant drinking from the trough and a bunch of other horses standing around dehydrating.  I have no desire to earn a living doing this.</p>

<p><em>I&#8217;m Not Qualified</em> - I learn new things every day and I often remind myself that devops isn&#8217;t just me preaching DevOplyness, but also involves me actively empathizing with and trusting people I find difficult or frustrating to work with.  This stuff is hard, and I&#8217;m not even close to perfect. I&#8217;d rather lead by example than preach. I feel like a hypocrite telling other people how to put their house in order when I&#8217;m still cleaning my own.</p>

<p><em>I&#8217;d Rather Be Crafting</em> - Let&#8217;s face it. If I say Devops Consultant, that&#8217;s management consulting. As much as I&#8217;ve considered going into management because of the ignorance I see in charge of stuff, <strong>I&#8217;d rather be making things</strong>. This is a selfish thing, right? I love to CLI and hack on Ruby and play with Chef and figure out why stuff is broken, mentor newer engineers and coach devs on how to operationalize their apps. I don&#8217;t get to do that if I&#8217;m teaching senior management about devops. It&#8217;s why I like consulting. There&#8217;s always a new problem to solve.</p>

<h4>Is Continuous Delivery a valid Euphemism for devops?</h4>

<p>This was also touched on yesterday. Jeff Sussna wrote a <a href="http://blog.ingineering.it/post/43356457789/devops-er-continuous-delivery">well-articulated article</a> for why we should just call it Continuous Delivery instead of devops.  I think Adam and I were not actually disagreeing about anything in our chat today, unless he was postulating that CD is as nebulous as devops. I don&#8217;t think it is. I think Continuous Delivery is a measurable deliverable and a valid consulting field. If done right, it results in not just a great pipeline, but also devops culture because CD should be impossible with crappy culture.</p>

<h4>What About devops?</h4>

<p>I know some folks who are doing the devops consulting thing. They generally <em>want</em> to do the management consulting thing and they believe wholeheartedly in devops as cultural shift and in
<a href="http://www.opscode.com/blog/2010/07/16/what-devops-means-to-me/">CAMS</a>, which I think is the key to making it work, if that&#8217;s what you really want to do.<br/>
There are also some super fantastic companies with amazing cultures; some calling it devops, others not but still living the lifestyle. I&#8217;m not panning everything calling itself devops. However, the more I see vendors and recruiters latch onto the word and commoditize it without sincerity, the less I want to actually associate with the word myself and the more grains of salt I require when I get yet another email from someone telling me about their great devops job for which I&#8217;d be a perfect fit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Nerdery: Chromatic Coffee]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/03/07/coffee-nerdery-chromatic-coffee/"/>
    <updated>2013-03-07T08:19:00-06:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/03/07/coffee-nerdery-chromatic-coffee</id>
    <content type="html"><![CDATA[<p><a href="http://www.chromaticcoffee.com">Chromatic Coffee</a>   <br/>
<strong>Location</strong>: Santa Clara, CA, a few miles from the Apple campus  <br/>
<strong>Espresso</strong>: <a href="http://www.chromaticcoffee.com/ProductDetails.asp?ProductCode=emperor%2Despresso">Emperor</a> <br/>
<strong>Hardware</strong>: La Marzocco and heavily modded grinders of unknown origin (see picture) <br/>
<strong>Coffee Art</strong>: heck yeah <br/>
<strong>Wifi</strong>: Yes <br/>
<strong>Drink</strong>: Cappuccino <br/>
<strong>Served in</strong>: 5oz ceramic cups <br/>
<strong>Visited</strong>: Daily in February and March 2013</p>

<p><img src="http://blog.brattyredhead.com/images/chromatic_coffee.jpg"></p>

<p>I first met Chromatic Coffee when it was a franchise under another name in June 2012. For the record, it was super then too. I recently acquired a client in Santa Clara, CA and knew I would be traveling out here every week.  Strangely, Silicon Valley does NOT have a great artisan coffee shop on every corner. A lot of the area is actually office park and strip mall hell.  When I found this place last year, I drove 8 miles from the Hyatt Convention Hotel to get some decent coffee. (For the other record, all of the espresso served at the Hyatt is utterly vile).</p>

<p>So I immediately thought of this location when I set up weekly trips to California. In the meantime I discovered the shop had changed its name to Chromatic Coffee but was the same crew of awesome baristas that I&#8217;d met last year.  I actually managed to find a good hotel near the shop, putting me about 5 miles from the client but worth every commuting minute, knowing I&#8217;d have decent coffee at least once a day (I work in office park hell).</p>

<p>I am happy to say that breaking off on their own has only improved things over here.  In my chats with the baristas, I&#8217;ve learned that the owner is a tech obsessed uber coffee nerd. You can see this in the fact that they are their own roastery and hey, check out the grinders.  Heavily modded, the barista couldn&#8217;t remember the original brand on them, but informed me that the owner is actually working on his own equipment as well. (uber techie coffee nerds unite!).</p>

<p><img src="http://blog.brattyredhead.com/images/chromatic_grinders.jpg"></p>

<p>So I can&#8217;t tell you enough how much I love Chromatic. Everyone there is super nice and super knowledgeable about the coffee and will happily nerd out over coffee talk when it&#8217;s not busy.  There&#8217;s also a Hario pourover bar and they tell me they make cold brew as well, which I will be sampling next week.  In addition to all the other awesome, they hold classes on everything from pour-over technique to barista art.</p>

<p>Bonus: They are not snooty coffee snobs here. You can order your drink with skim milk or to go and no one will look down their nose at your or inform you snottily that they only use whole milk from locally approved cows.</p>

<p>I wish I could keep gushing, but you should really get in here and try them for yourself. Don&#8217;t be fooled by their strip mall exterior. They are beyond awesome.</p>

<p><img src="http://blog.brattyredhead.com/images/chromatic2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Scripts Are Like Gremlins]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/12/13/shell-scripts-are-like-gremlins/"/>
    <updated>2012-12-13T20:15:00-06:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/12/13/shell-scripts-are-like-gremlins</id>
    <content type="html"><![CDATA[<p><img src="http://blog.brattyredhead.com/images/gremlin3.jpg"/></p>

<p>Today I ended up in a heated discussion with some team mates over deployment strategies. As is often the case with this team, myself included when I don&#8217;t stop and think, we often leap right to arguing over which tool is best before discussing the problem we want to solve. It wasn&#8217;t the first time.</p>

<p>The source of this discussion was brought on while we were reviewing some chef work I&#8217;m doing with a development team.  My work was mainly to assist them in getting to functioning cookbooks that also had their app logic separate from global cookbooks. I basically copied their intent wherever it made sense while shoring up design and Chef styling. One of the things they were doing was making a call to our Artifactory server for a latest snapshot of a WAR file, downloading it into the Tomcat directory and restarting Tomcat. Works for me.</p>

<p>Getting to this point in the review triggered a long, heated debate over</p>

<ol>
<li>whether you ever wanted this to happen,</li>
<li>whether you should use Chef to manage deployments, use Jenkins to kick off shell scripts or use some other orchestration tool to do something else or</li>
<li>just copy the world by hand (well, no one really believes that last is a good idea).</li>
</ol>


<p>I was like, geez guys, I&#8217;m just mimicking the dev team&#8217;s functionality, why are we are arguing about this? But this has been a topic of discussion often recently and, with another team announcing yesterday they were writing a homegrown tool to manage jboss, deploy ATG ears and manage config files all retrieved from Artifactory, I don&#8217;t expect the subject to die soon.</p>

<p>I don&#8217;t think there&#8217;s one right answer to how you deploy your code, but I think there are many poorly thought out ones. I&#8217;m not here to necessarily make an argument for Chef as a deployment orchestrator.  While there are people deploying with Chef at scale, I am not one of them, nor have I been. My work with Chef has been mainly in development with some provisioning and so I have a lot of theories, but that&#8217;s really all.  What I do want to talk about is why I don&#8217;t like shell scripts for deployments or orchestration and what I want in a deployment system. This is the first part of at least a 2 on this topic.</p>

<p><strong>Shell Scripts are like Gremlins</strong>. You start out with one adorably cute shell script. You commented it and it does one thing really well. It&#8217;s easy to read, everyone can use it. It&#8217;s awesome! Then you accidentally spill some water on it, or feed it late one night and omgwtf is happening!?</p>

<p><strong>The Fixer</strong>: Someone else comes along and found an edge case your shell script doesn&#8217;t deal with. They add in some logic for the edge case, voila, problem solved.</p>

<p><strong>The Refiner</strong>: Eventually someone realizes the logic for the edge case is not specific enough and is causing deployments to fail sometimes, so they refine the logic.</p>

<p><strong> The Slippery Slope</strong>: After that, someone might decide it&#8217;s a good idea to automate stopping the apache server from sending traffic during deployments and decides to do it in the same script.  Great idea! That&#8217;s such an awesome idea that everyone starts adding functionality to the tiny beautiful shell script, now no longer tiny nor beautiful.</p>

<p><strong>OMG GREMLINS!</strong>  Then you come back along and find all the extra stuff in your shell script that doesn&#8217;t belong there.  You&#8217;re horrified. You might even be feeling a little bit violated (come on, we&#8217;ve all been there at least once).  So what do you do? You pour some water on it. You break out the shell script into several functional bits. Now we have LOTS of gremlins instead of just one. Now you have a <em>suite</em> of scripts that are once again beautiful. But now the deployment is complex. You have a suite of <del>bash</del> <del>perl</del> <del>ruby</del> <del>python</del> scripts that also need a wiki page to describe intended flow, what to do if something doesn&#8217;t work and any edge cases that you haven&#8217;t gotten around to scripting yet.</p>

<p><strong>The Exodus</strong>: Next up: You get a call from a buddy who is dying to have you come work for his Next Big Thing startup. So you quit your job, pack your bags and move to Silicon Valley Sitcom with ne&#8217;er a backwards glance, leaving a couple of forlorn junior sysadmins desperately reading wiki pages trying to figure out what to do with your shell scripts as a new application is launched that requires a bunch of new logic for deployment. These guys do the best they can and start tacking on if statements everywhere they need to in order to make the deployments go.</p>

<p><strong>Subsistance Living</strong>: 6 months later, one of these guys leaves and the company hires 3 more guys with no understanding of the history of the deployment scripts.  Sometimes they work, sometimes they don&#8217;t, people aren&#8217;t entirely sure why and just self correct by hand at the command line until things work(phew!). Everyone is afraid to touch them because they are fragile, the code connecting them is obscure and there are similar logic blocks found in several sections, sometimes commented out, sometimes used, but you&#8217;re not really sure whether it&#8217;s necessary. The original wiki page gets updated sometimes but not often and not usually by the person maintaining the scripts but by the people using them in the middle of the night.</p>

<p>And that&#8217;s why I hate shell scripts and think you should never use them for deployment scaffolding.</p>

<p><strong>True story</strong>: my first venture with Chef involved deconstructing an organically grown Kickstart post that had been originally written for Red Hat 3 and subsequently updated for RH 4, 5 and 6.  I was removing functionality from the postscript and rewriting it in Chef blocks when one of the admins came and yelled at me for omitting a block of host names from /etc/hosts and I was like, GUYS, those host names are for servers in a data center that was decommissioned  when I started here 3 years ago.</p>

<p>You can tune in for the second half of this blog post, what I want in a decent deployment system, when it goes up next week on the <a href="http://sysadvent.blogspot.com">Sysadvent blog</a>.  Woohoo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Nerdery: Blue Ox, Minneapolis]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/15/coffee-nerdery-blue-ox/"/>
    <updated>2012-09-15T14:53:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/15/coffee-nerdery-blue-ox</id>
    <content type="html"><![CDATA[<p><strong><a href="http://blueoxcoffeecompany.com">Blue Ox</a></strong><br/>
<strong>Location</strong>: Chicago and 38th St, South Minneapolis, MN<br/>
<strong>Espresso</strong>: Counter Culture <br/>
<strong>Hardware</strong>: Mazzer and La Marzocco<br/>
<strong>Coffee Art</strong>: Yes<br/>
<strong>Drink</strong>: cappuccino<br/>
<strong>Served in</strong>: 6oz ceramic cups<br/>
<strong>Visited</strong>: 2012 often</p>

<p><img src="http://blog.brattyredhead.com/images/blueox.jpg"></p>

<p>The Blue Ox coffee shop opened up about 3 blocks from my house in 2011.  I love
them. I love that they opened up in what I consider a marginalized area of
Minneapolis, albeit one that people are working to revitalize. I love that
I can walk 3 blocks to get wonderful artisan coffee. Sadly, I&#8217;m super lazy and
often stay home and make my own substandard not-really-artisan coffee instead.</p>

<p>Blue Ox always has local art on the walls. Furnished with several second hand
dinette tables and chairs, they also have a comfy futon and you&#8217;ll often find
the windows open and the ceiling fans running instead of a/c.</p>

<p>Baristas here are always willing to talk the finer points of espresso and
coffee with you.  They have individually brewed coffee, pour over and they&#8217;ll
make you an AeroPress Aerobie coffee if you ask.  I&#8217;ve chatted with them and
I know they calibrate the espresso grind and length of the pull at least every
morning, sometimes more.</p>

<p>They&#8217;ve cycled through a few different brands of coffee and have recently
started serving Counter Culture beans. When paired with the local milk used
here, these produce a lovely, sweet  espresso drink.</p>

<p>Warning, Blue Ox only serves whole milk.  There is no skim or 2% here. They
probably have soy, although I haven&#8217;t asked.  They have locally baked pastries
but no hot food. Today when I came in, they were also offering chips and hummus
or salsa.</p>

<p>When you combine the laid back atmosphere and super yummy coffee combined with
proximity to my house, Blue Ox pretty much wins my &#8220;favorite coffee shop in
Minneapolis&#8221; award.  That&#8217;s not to say there aren&#8217;t other places just as good
and I&#8217;ll be getting to those in future posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Nerdery: Irving Farm, New York]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/08/coffee-nerdery-irving-farm/"/>
    <updated>2012-09-08T20:11:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/08/coffee-nerdery-irving-farm</id>
    <content type="html"><![CDATA[<p><a href="http://www.irvingfarm.com/index.cfm">Irving Farm Coffee Roasters</a><br/>
<strong>Location</strong>: New York, 14th St &amp; 7th Ave, Uptownish<br/>
<strong>Espresso</strong>: Irving Farms<br/>
<strong>Machines</strong>: La Marzocco &amp; Doge<br/>
<strong>Coffee Art</strong>: yes<br/>
<strong>WiFi</strong>: Unknown<br/>
<strong>Served in</strong>: 8oz ceramic cup<br/>
<strong>Drink</strong>: skim cap<br/>
<strong>Visited</strong>: 9/2/12</p>

<p><img src="http://blog.brattyredhead.com/images/irvingfarm.jpg"/></p>

<p>Verdict: Noms. Seems like a lot of places in NYC are serving Intelligentsia
coffee.  While I don&#8217;t object necessarily, it&#8217;s nice to see a coffee shop using
locally roasted or even better, roasting its own.  My drink was mild and
reminded me a bit of Stumptown with it&#8217;s citric tinge. They heated the milk
a bit more than some places but it was still drinkable and I like my milk with
a smidge of heat so the drink doesn&#8217;t cool off too soon. I&#8217;m guessing they heat
to 145-150.</p>

<p>There are four small tables and a wall bench at this location, so the lounge
factor isn&#8217;t high.  However, the was an elderly man enjoying his newspaper
when I got here and so I&#8217;m guessing foot traffic isn&#8217;t too obnoxious.
The shop is small and unassuming from the outside and I wouldn&#8217;t have noticed
except I got off the subway there and was looking for friends.</p>

<p>Fyi, no public bathroom</p>

<p><strong>Final Word</strong>: Noms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Nerdery: Financier, New York]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/08/coffee-nerdery-financier/"/>
    <updated>2012-09-08T19:55:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/08/coffee-nerdery-financier</id>
    <content type="html"><![CDATA[<p><a href="http://financierpastries.com/">Financier Coffee</a><br/>
<strong>Location</strong>: New York, Cedar &amp; William, Downtown, Financial District<br/>
<strong>Espresso</strong>: Financier (roasted in Park Slope, Brooklyn)<br/>
<strong>Machine</strong>: La Marzocco &amp; Mazzer<br/>
<strong>Coffee Art</strong>: No<br/>
<strong>WiFi</strong>: kind of (&#8220;It&#8217;s not working right now&#8221;) <br/>
<strong>Served in</strong>: 8oz ceramic cups after I asked twice for &#8220;here&#8221;<br/>
<strong>Drink</strong>: skim cappuccino<br/>
<strong>Visited</strong>: 9/2/2012</p>

<p><img src="http://blog.brattyredhead.com/images/financiercoffee.jpg"></p>

<p>This drink had the potential to taste good.  Unfortunately the
barista had no concept of micro foam or craftsmanship. The taste is a little harsh but I can see
that it could taste awesome if prepared correctly.</p>

<p>Financier prepares and roasts their own beans and so I may come back again and
check as it has the advantage of being close to where I&#8217;m staying and the
subway stations are totally horked with construction this weekend. (n.b.
I didn&#8217;t. I walked to Kaffe 1668 in search of a sure thing).</p>

<p>The pasty case looks amazing but I won&#8217;t be able to report on that. The store
has long bar seating at the window plus some table in the back. While
I prefer the dark hipster coffee shops, this is still ok.  The music is kind
of pop/r&amp;b dreadful. There&#8217;s no public bathroom either btw.</p>

<p>Also, beware, a small cappuccino is really only one shot. They divide the
shots. When I saw that, I asked for the second. This annoyed me.</p>

<p><strong>Pros</strong>: cap tastes good despite mangled prep, bright and airy if you like that,
PASTRIES!<br/>
<strong>Cons</strong>: Inexperienced baristas, Split shots (who are you, Starbucks?), crappy wifi</p>

<p><strong>Final word</strong>: Beats Starbucks and the nearby Blue Spoon</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Isn't This Funny?]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/04/why-isnt-this-funny/"/>
    <updated>2012-09-04T23:11:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/04/why-isnt-this-funny</id>
    <content type="html"><![CDATA[<p><img src="http://blog.brattyredhead.com/images/cczqi.jpg"/></p>

<p><strong>tl;dr</strong>: As a sysadmin, whenever someone tweets something snarky about sysadmins,
I feel a little put down. As a result, I try to think twice about snarky stuff
I might tweet about devs or other teams. And so, I think sysadmins posting snarky captioned
images about devs and then adding the devops hashtag is mean and
inappropriate.</p>

<p>I&#8217;ve seen this captioned image circulating all day with the devops hashtag on Twitter. For the
record, I don&#8217;t think this picture is funny. In the right context, it might
be funny. If it were, say, a slide in a deck pointing to how things are or
used to be without devops, I&#8217;d laugh. My issue is seeing tweeted with the devops hashtag
and having it billed as funny.</p>

<p>Now I love me some snark. But I think it&#8217;s too easy to be
snarky and mean on Twitter,  because there isn&#8217;t a lot of consequence and we
tend to live within a circle of our peers who often think alike.  The snark
factor often goes up around conference time when many of us are congregating
in once place and competing to sound smart and funny in 140 characters or
less. I&#8217;ve commented before that I think people are too often mean on Twitter
in the name of being witty or complaining about speakers without ever
thinking about what that speaker might feel if he sees that tweet later.</p>

<p>So why does this caption bother me? I have a long history of unfiltered snark
and smart ass remarks. Consulting since 2006 taught me a lot about active
filtering and my introduction to DevOps caused me to implement additional filtering for the
sake of my emotional attachment to an ideal.</p>

<p>As someone who&#8217;s signed on as a big fan of DevOps culture, I spend a lot of
patrolling my cynicism and preventing disparaging remarks from escaping the
filter. I think when you espouse certain ideals, you&#8217;re responsible all the
time for representing them.</p>

<p>I sometimes see cynical, catty remarks about sysadmins or ops from people who
can only have come from a long life of development and, even though I haven&#8217;t
technically done ops in 7 years, I&#8217;ve been sysadminly all my long life and
I am affronted every time by those remarks. Recently I heard a professional dev
say to someone in a beginners programming workshop, &#8220;If you want
to understand/master the install of the programming tools, you&#8217;re probably
better off as a sysadmin not a programmer.&#8221; The guy who said is a super nice
guy, but that remark still got a side-eye from me.</p>

<p>If DevOps is a movement that promotes collaboration, communication, respect
and friendship between functional teams, I don&#8217;t think a sincere proponent
would post this kind of caption. While it makes some folks feel validated,
it&#8217;s just fueling the fire that walls people off from each other.  I don&#8217;t
think we can all get along when folks are throwing up cynical remarks
perpetuating stereotypes of bad development practices.</p>

<p>While there are many successful DevOps teams out there, there are far more
silos in transition or bitter adversaries who haven&#8217;t yet heard of DevOps.
I can&#8217;t believe that only some developers or sysadmins are capable of transcending the usual barriers;
I have to believe that any and all are able to transcend them or what&#8217;s the
point?   But it&#8217;s the more entrenched and cynical cases that will be the most
difficult to move ideologically and emotionally and I feel that humor like
this can only alienate.</p>

<p>I don&#8217;t want to pick on anyone specifically because I see this kind of humor
from all disciplines all the time and it makes me increasingly uncomfortable each
time. If we&#8217;re actually going to all be in this together, we need to jump in
with both feet. So I thought I would speak up for a moment and say something.
If a thing can only be funny by being rude about someone else, maybe it&#8217;s not
actually funny at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Nerdery: La Colombe]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/03/coffee-nerdery-la-colombe/"/>
    <updated>2012-09-03T19:38:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/03/coffee-nerdery-la-colombe</id>
    <content type="html"><![CDATA[<p><a href="http://lacolombe.com">La Colombe</a><br/>
<strong>Location</strong>: New York, NoHo@400 Lafayette<br/>
<strong>Espresso</strong>: La Colombe<br/>
<strong>Machines</strong>: La Marzocco &amp; Mazzer<br/>
<strong>Coffee Art</strong>: yes<br/>
<strong>Wifi</strong>: unknown<br/>
<strong>Served in</strong>: 8oz ceramic <br/>
<strong>Drink</strong>: skim cap<br/>
<strong>Visited</strong>: 9/2/12</p>

<p>This was a quick stop while out shopping with a friend. There&#8217;s ample seating
and it&#8217;s a light, airy space. My coffee was ok, although it was a smidge
bitter. I&#8217;d probably have to try again to see how I liked the coffee.
However, it&#8217;s a great place, good for meeting a friend or stopping in and
they take their coffee production pretty seriously. I didn&#8217;t actually see
a menu anywhere although I wasn&#8217;t looking.</p>

<p>They did have an adorable water &#8220;fountain&#8221; that offered room temperature,
cold or carbonated water and they&#8217;ll offer you a water cup no problem.  The
staff is professional and fast. This coffee shop had the most starbucksian
feel to it of all the shops I&#8217;ve been too, but I don&#8217;t really mean that in
a derogatory way. I just mean that they turned out product quickly. The
product they turned out was definitely far superior to anything Starbucks
will serve you. I still prefer low-lit, shabby, hipster joints, but I&#8217;d have
no problem coming back here.</p>

<p><strong>Pros</strong>: Fast, good coffee<br/>
<strong>Cons</strong>: None really</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Nerdery: Macchiato, NYC]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/03/coffee-nerdery-macchiato/"/>
    <updated>2012-09-03T13:55:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/03/coffee-nerdery-macchiato</id>
    <content type="html"><![CDATA[<p><a href="http://www.macchiatocafe.com/">Machiatto</a><br/>
<strong>Location</strong>: near Times Square<br/>
<strong>Espresso</strong>: Macchiatto 44 roasted by Seattle-based Fonte Micro Roasters<br/>
<strong>Hardware</strong>: Fonte branded<br/>
<strong>Coffee Art</strong>: No<br/>
<strong>WiFi</strong>: unknown<br/>
<strong>Served in</strong>: 12oz cardboard cups<br/>
<strong>Drink</strong>: skim cappuccino<br/>
<strong>Visited</strong>: 8/29/2012</p>

<p>Sorry, no picture. This was on the run with friends.</p>

<p>Macchiato is a local two-shop chain in NY. It&#8217;s a restaurant as well as coffee
bar and appears to have a brisk lunch crowd. Seating is small tables and
chairs. This was a spontaneous stop after having lunch with friends near Times
Square. We stood in a long but efficient line. I was alarmed at the amount of
milk they poured in my 12oz drink and thought it would taste more like milk
than coffee.  While I would have preferred less milk, the taste was still
sweet, I could still taste coffee and the micro foam was lovely.  The
temperature of the drink was fine without a sleeve and the taste was nicely
sweet, leading me to suspect they probably use local and/or premium milk.
I prefer my caps with less milk, but if you aren&#8217;t picky about lattes vs caps,
you&#8217;ll probably like it. If I&#8217;d actually ordered a macchiato, it probably would
have been lovely.</p>

<p><strong>Pros</strong>: Fast service, lovely taste, great micro foam<br/>
<strong>Cons</strong>: Busy and lacking in attention to detail.</p>

<p>Final word: I would go here if I were near but wouldn&#8217;t go out of my way to get
some and I might look around for something different if I were planning ahead.
I think 12oz cups are way too big for most drinks, but it did taste good, so
YMMV.  It makes me interested in checking out Fonte Coffee Roasters in Seattle!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Nerdery: Blue Spoon]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/03/coffee-nerdery-blue-spoon/"/>
    <updated>2012-09-03T09:38:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/03/coffee-nerdery-blue-spoon</id>
    <content type="html"><![CDATA[<p><a href="http://www.bluespooncoffee.com/">Blue Spoon</a><br/>
<strong>Location</strong>: New York, Downtown (Williams and Platt)<br/>
<strong>Espresso</strong>: Intelligentsia<br/>
<strong>Hardware</strong>: La Marzocco + Mazzer<br/>
<strong>Coffee Art</strong>: No<br/>
<strong>WiFi</strong>: yes, from the park across the street (NY DTA), sketchy<br/>
<strong>Served In</strong>: 8oz cardboard<br/>
<strong>Drink</strong>: skim cappuccino<br/>
<strong>Visited</strong>: 8/31/2012</p>

<p><img src="http://blog.brattyredhead.com/images/bluespoon.jpg"></p>

<p>This is a small shop at corner of William and Platt in the Financial
District.  The coffee is too hot leading me to guess they overcook the milk. I ate
half a bagel waiting for it to cool off. If I had been walking, I would have
wanted a sleeve, which I generally never need with artisan coffee joints. It
was interesting that the beans were Intelligentsia as the taste seemed to
have a lot more licorice or citrus than the other locations serving the same
beans. Reminded me a bit of Stumptown when it&#8217;s pulled too long.</p>

<p>Other, non-coffee specific: It&#8217;s hot in here. It&#8217;s a very small space and
I think there&#8217;s some a/c near the counter, but I&#8217;m about 8 feet away at
a window bar and sweating while drinking my coffee. Also, despite ordering
&#8220;for here,&#8221; I received cups with lids on them and a bagel toasted but wrapped
up in wax paper and a lunch bag.</p>

<p><strong>Pros</strong>: They&#8217;re 2 blocks from where I&#8217;m staying and bagel noms.<br/>
<strong>Cons</strong>: scalded milk, bitter, citric taste, location heat.</p>

<p>Followup: It was 90 degrees Friday afternoon, so I opted to walk back here
despite the meh experience of the morning.  I got the same kind of drink that
I think had even more milk than my morning cups. Very disappointing
experience for a shop that actually has a La Marzocco in residence.</p>

<p>Final word: Despite the La Marzocco, this shop is not serving artisan coffee
and I don&#8217;t recommend it. It beats Starbucks, but just barely. Intelligentsia
should investigate the crimes being committed against their beans in this location.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee Nerdery: Kaffe 1668]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/02/coffee-nerdery-kaffe-1668/"/>
    <updated>2012-09-02T17:42:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/02/coffee-nerdery-kaffe-1668</id>
    <content type="html"><![CDATA[<p><strong><a href="http://kaffe1668.com">Kaffe 1668</a></strong><br/>
<strong>Location:</strong> New York, Tribeca a few blocks from the GZ Memorial<br/>
<strong>Espresso:</strong> Intelligentsia <br/>
<strong>Hardware:</strong> Synesso &amp; Mazzer<br/>
<strong>Coffee Art:</strong> Yes<br/>
<strong>WiFi:</strong> yes<br/>
<strong>Drink:</strong> skim cappuccino<br/>
<strong>Served in:</strong> 6oz ceramic cups<br/>
<strong>Visited:</strong> 2012 Aug30, Sep1 &amp; 3</p>

<p>  <img src="http://blog.brattyredhead.com/images/kaffe1668.jpg"/><br/>
 This coffee shop was recommended to me by a casual Facebook friend who moved to NYC
 from Minneapolis and used to be a barista himself.</p>

<p> Kaffe 1668 is a lovely little shop with dark wood tables and benches. It&#8217;s
 quite dim inside and I really like it. They serve espresso drinks and
 individually brewed coffee.  My cappuccinos were low temperature and actually
 cooled rather quickly as I was lollygagging.  However, they were very good and
 I enjoyed every drop. In a world where too many drinks are made with scalded
 milk, I&#8217;m ok with the consequences of low temps. The shop has cold pastries.
 I had a scone on my first visit and a breakfast sandwich on a baguette on the
 next. The scone was good, the baguette was chewy(I know nothing about french
breads so take that fwiw).</p>

<p> Your wait for coffee can be significant. The line moved a bit slow and it
 took a while for my drinks to be made.  However, it&#8217;s worth it as the
 baristas are perfectionists and won&#8217;t serve a substandard drink. On my first
 visit I was informed that my second cup was late because they were remaking
 it.   I understand they recalibrate espresso pulls throughout the day here
 which is awesome.</p>

<p> One thing worth mentioning is that it seems to be a stroller destination on
 Saturday mornings. It&#8217;s still worth it for good coffee which seems to be
 missing in most of Downtown, but cranky babies can be a bit tough on the ears
 in the early morning.</p>

<p> Bonus: They&#8217;re open on Labor Day. Guess where I&#8217;m going when I get up
 tomorrow?</p>

<p> <img src="http://blog.brattyredhead.com/images/kaffe1668-2.jpg"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffee for Traveling Nerds]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/09/01/coffee-for-traveling-nerds/"/>
    <updated>2012-09-01T09:01:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/09/01/coffee-for-traveling-nerds</id>
    <content type="html"><![CDATA[<p>I&#8217;m embarking on something I&#8217;ve wanted to do for a long time. Coffee reviews
for traveling nerds. I don&#8217;t travel extensively but I do go places and my trip
logistics are often driven by my need for acceptable espresso drinks. Over the
years I&#8217;ve raised the bar several times for what I want in a coffee shop. I used to just get excited that
I could find Starbucks on road trips through Nebraska and Oklahoma or had
a Starbucks across the street from my hotel.</p>

<!-- more -->


<p>These days I look a little harder for local shops serving artisan espresso
drinks. I have been know to pore over Google Maps and search the internet for
hours before choosing a hotel for a trip. For road trips I look ahead of time
at where we might be able to stop for coffee, mostly because I&#8217;m afraid we&#8217;ll
miss the only coffee shop within 300 miles (this can happen in Texas!).</p>

<p>I&#8217;m not a top of the line coffee snob. I don&#8217;t attend cuppings and I&#8217;m not sure
I could tell the diff between espresso shots. To be honest, I&#8217;m not too fond of
straight espresso. I prefer my drinks to be about cappuccino strength. I don&#8217;t
roast my own beans although I&#8217;ve met those who have. I can&#8217;t make very good
coffee art, although I enjoy trying.</p>

<p>I drink most of my espresso at home, which is part of what&#8217;s raised the
bar when I look for coffee shops. If you spend a lot of time pursuing a great
shot, you start noticing when you&#8217;re served bitter espresso or scalded milk. I went from religiously drinking
Caribou cappuccinos to actively loathing them over a period of a few years.</p>

<p>Many years ago I had a Krups pot boiler espresso machine and a blade grinder.
I used that for years and considered it fine. Then I started thinking I wanted
a nicer espresso maker and started reading.  That&#8217;s when I learned about
grinders. Instead of buying a new espresso machine, I ended up buying a <a href="http://www.mazzer.com/scheda.asp?idprod=2">Mazzer
Mini</a>. This was before the Euro and when things were less expensive. I believe
it cost me around $350 at the time. That was all the money I could afford to
spend for a long time, so I had a super nice grinder and a crappy pot boiler
espresso machine.</p>

<p>Eventually my boyfriend and I each got Starbucks Barista machines on sale for
$200 and they were great for their price point until they died. At that point,
I was making more money and decided I wanted something nicer. I opted for
a <a href="http://www.rancilio.it/rancilio/prod_model.jsp?id_model=49&amp;id_language=3&amp;id_category=26">Rancilio Silivia</a>
which I later modded with a <a href="http://www.pidsilvia.com/">PID</a> that allows you to see and
regulate the brewing temperature for espresso.  This is where I&#8217;m at today:
Mazzer Mini, Rancilio Sivia. I tend to use the same espresso beans as
calibrating the grinder for different kinds requires wasting about half a pound
and too much time.  So I stick with a local provider: <a href="http://www.peacecoffee.com/">Peace Coffee
espresso beans</a>.
What do I consider an artisan shop? There are several optional
components but a few obvious things:</p>

<ul>
<li><strong>Their espresso machine aren&#8217;t automatic</strong>:
If you push a button to make the espresso, chances are good it&#8217;s going to taste
like ass, no matter how beautifully the beans were roasted. Example: I ended up
at a Pete&#8217;s Coffee in Santa Clara and was surprised at how downright yummy my
latte tasted. This shop was using a La Marzocco. I was so pleased that when
I went to the airport, I ordered some there.  The same drink came out of an
automated machine and was so vile I threw it out.  Seriously.  So this one
isn&#8217;t negotiable. You can&#8217;t have an automatic and call yourself artisan. Please
point me in the direction of anyone making sublime drinks with an automatic if
you disagree.</li>
<li><strong>Beans are ground for each drink, not hours in advance</strong>:
Yes this really happens. I have stopped at a few places and had them make
espresso with grounds from a bin.</li>
<li><strong>Coffee Art</strong>:
I consider this mandatory although not necessarily every single time if I go
often. What this tells a first time visitor though is that your baristas have
been trained on more than how to look at a theromometer and push a button. It
also adds a nice finishing touch to the drink, communicating that each drink is
an individual effort.</li>
</ul>


<p>Less mandatory, I like it when the barista can talk about calibration and taste
notes with their espresso(s). Another thing you&#8217;ll find in serious artisan
shops is milk snobbery.  When the Angry Catfish opened in Minneapolis, they did
several taste tests before settling on a local milk provider. They also only
serve whole milk, no arguments, although they&#8217;ll also use soy.</p>

<p>So anyway, I&#8217;ve started writing up my NYC coffee shop experiences and will post
a separate snippet for each shop. I&#8217;ll also create entries for places like that
awesome shop we found in Denton, TX and other recent trips to Baltimore,
Seattle and Santa Clara. I know this is
a technical blog, but coffee is so much a part of our lifestyles that it seems
a natural add-on. I hope you enjoy it and if you have suggestions for places
for me to visit, please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Epic ATG Cheffing]]></title>
    <link href="http://blog.brattyredhead.com/blog/2012/08/11/epic-atg-cheffing/"/>
    <updated>2012-08-11T08:47:00-05:00</updated>
    <id>http://blog.brattyredhead.com/blog/2012/08/11/epic-atg-cheffing</id>
    <content type="html"><![CDATA[<p>I just want to take a moment to point you at an epic new Chef cookbook undertaking. John Larsen has been working on a <a href="http://community.opscode.com/cookbooks/atg">cookbook to configure a full ATG stack with JBoss</a> and has finished a first version. This is something I always wanted to work on but never got around to, and so I&#8217;m being extra appreciative of someone who did take the time to get it working.</p>

<!-- more -->


<p>Anyone who works on ATG projects knows that installing and configuring the
first instances of ATG is hella complex and nearly impossible to do even with
documentation.  With all the options, variables and components, it mostly takes repetition and mistakes to get an initial ATG install correct.</p>

<p>That&#8217;s <strong>not</strong> what this cookbook is about. You still have to know how to get ATG
right the first time or have someone on your team who does. This cookbook is
not going to make you an ATG expert, but it will relieve the tedium of
managing your configurations. It will also speed up adding a new instance. The more epic your configs, the more awesome this
cookbook will be for you.</p>

<p>The cookbook contains a modified version of <a href="http://community.opscode.com/cookbooks/jboss">Bryan Berry&#8217;s JBoss Cookbook</a>, specialized for ATG deployment and does the following cool things:</p>

<ul>
<li>Configures single or multiple instances of JBoss on a server</li>
<li>Provides flexibility to determine where you will setup your lock management,
global, process and workflow managers.</li>
<li>Configures port management for ATG legacy ports</li>
<li>Has templates for all the major ATG property files, like
Configuration.properties, Lock Manager, scenario manager and  workflow process manager</li>
<li>Has templates for major jboss/atg configs like atg-ds.xml, bindings, log4j,
run.conf, etc</li>
<li>Definitions for configuration sets (lock, staging, store&#8230;)</li>
</ul>


<p>The ATG cookbook is well thought out, fairly large and handles complex scenarios. If you are in
the position of having to manage or build an ATG environment, I definitely
encourage you to check it out.  With something like this, it would even be
possible to stealth manage your configs with Chef-solo early on if you&#8217;re looking to prove out
configuration management for ATG-JBoss. In my experience, there&#8217;s something about
shops running this combo that makes them, in general, resistant to
configuration management. Possibly it&#8217;s the breakneck speed at which I see them
running (often with scissors).</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Bratty Redhead]]></title>
  <link href="http://blog.brattyredhead.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.brattyredhead.com/"/>
  <updated>2013-05-17T09:20:12-07:00</updated>
  <id>http://blog.brattyredhead.com/</id>
  <author>
    <name><![CDATA[Sascha Bates]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Your Ruby Toolchain part 2: The Package Repo Rant]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/05/15/managing-your-ruby-toolchain-the-package-repo-rant/"/>
    <updated>2013-05-15T10:04:00-07:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/05/15/managing-your-ruby-toolchain-the-package-repo-rant</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong> Use package repos for all your static software</p>

<p>Last weekend I wrote a <a href="http://blog.brattyredhead.com/blog/2013/05/12/pieces-and-parts-managing-your-ruby-toolchain/">blog post</a> that started exploring standards for managing your Ruby toolchains. To review, I had a query from someone on how to cope with the dynamic nature of Ruby-based tooling and managing a Chef infrastructure. and the fact that you don't always want to go to the internet to get stuff, it's a pain to be compiling things on servers all the time AND to do that, you need a compiler which is regarding as a Bad Thing<sup>TM</sup> in Production.</p>

<p>The question came to me via a talk I did at Chef conf and I'm going to use Chef examples, but, unless someone tells me different, I'm going to come down on the side of you can use this advice with Puppet and CFEngine and any other CM tool out there. It works without CM too, but why would you ever?</p>

<p>In this blog post, I want to talk about why I am so adamant about package repositories and offer some real world examples.  I pick on Tomcat a lot here. Nothing against Tomcat. It's something most people understand and that I have also had personal experience with it not being managed as a package and creating much distributed pain.</p>

<h2>Broken Record Much?</h2>

<p>I can't shut up about package repos. Why am I so passionate about the need for all package repos all the time and to have a team actively managing and grooming them?</p>

<p>As part of the decentralization of Ops teams and the rise of DevOps, we now see multiple autonomous teams simultaneously working on similar projects but not collaborating or communicating on infrastructure.  It behooves the infrastructure managers, whether that's ops or devops or the tools team or a central collaborative group comprised of reps from all the teams, to own and groom a collection of package repositories.</p>

<p><strong>But Why?</strong> <br/>
With the rise of self-service, all you can eat virtual machines, development teams are expected and want to be independent from the corporate server supply chain.  Unfortunately this also decouples them from people they depend on: infrastructure and middleware experts(Yes Ops, that's you). They may sail gayly on and do their best or trudge forward grudgingly, resenting all of the extra work they now have to do because the Enterprise wants to be "like a startup." Either way, they're going to move forward, and when you don't offer them ways to easily use software, they'll figure out ways to [cope][]; ways that will horrify you when you discover them.</p>

<p><strong>I work at a startup because Enterprise is stupid like that.</strong><br/>
Nope. It's not only the Enterprise that needs to fear the chaos of unmanaged, difficult to use infrastructure. Say your whole startup is fewer than 20 people? You're the "devops engineer" and you work with a 5 person dev team.  The dev team may or may not include you in everything.  You might not know of actions they've taken to [cope][] with problems you don't even know they have. They don't realize there could be a simple solution to their problems because they are brilliant startup devs and they will just figure it out.  Then they'll hand you their giant shiny mud pie and you will cry because you could have saved them a bunch of work with a few well placed repos and a web proxy.</p>

<p>Package repos create a beautiful garden where you static software can flourish and discourages tarball weeds from springing up in the cracks everywhere.</p>

<p><strong>If you establish a well known, central location for packages, people will know to look there first for an existing package that meets their needs. And they will ask to place packages they need there as well.</strong></p>

<p>Ex: In the situation where someone thinks</p>

<blockquote><p><em>"I need Tomcat7 and Red Hat only ships with Tomcat5"</em></p></blockquote>

<p>Their correlating thought will NOT be</p>

<blockquote><p><em>"I should go download that from the internet and store it on the jumphost"</em></p></blockquote>

<p>but instead</p>

<blockquote><p><em>"I wonder if we have that in our custom repo?"</em></p></blockquote>

<p>or in an even more mature organization</p>

<blockquote><p><em>"I should include our Tomcat cookbook in my runlist and override the attributes that are unique for my situation"</em></p></blockquote>

<h3>When you make package repos easy to access and use, you</h3>

<ul>
<li>Eliminate several slightly different copies of software (ex: tomcat) floating around your infrastructure.</li>
<li>Eliminate several slightly different versions of packages deployed to Production.</li>
<li>Discourage placing random tarballs in version control or Chef cookbook files.</li>
<li>Make your configuration management tool easy and intuitive to use.</li>
</ul>


<h3>The Problem With Tarballs - a Real Life Example</h3>

<p>Config management tools are designed to be idempotent, which means they only do things once and ensure things look the same regardless of how many times you run the the same process.  <em>Tarballs subvert the use of configuration management primitives</em>, requiring the use of non-idempotent execute blocks to manipulate them.  Real world example:</p>

<p>Without a package repo in place, this happens:
``` ruby
remote_file "/tmp/tomcat7.tar.gz" do
  source "https://www.sometomcaturl.com"
  not_if { File.exists?("#{node[:tomcat][:home]}/bin") }
end</p>

<p>execute "extract_tomcat" do
  command "tar xf /tmp/tomcat7.tar.gz"
  cwd "opt"
  not_if { File.exists?("#{node[:tomcat][:home]}/bin") }
  only_if { File.exists?("/tmp/tomcat7.tar.gz") }
end
```</p>

<p>Or this utter travesty:
``` ruby
bash "install_tomcat6" do</p>

<pre><code>tomcat_version_name = "apache-tomcat-#{node.tomcat.version}"
tomcat_version_name_tgz = "#{tomcat_version_name}.tar.gz"
user "root"
code &lt;&lt;-EOH
  curl --proxy https://aproxy.com:8080/ --user user:pass https://myartifactoryurl.com/artifactory/ext-release-local/apache-tomcat/apache-tomcat/#{node.tomcat.version}/#{tomcat_version_name_tgz} -o /tmp/#{tomcat_version_name_tgz}
  tar -zxf /tmp/#{tomcat_version_name_tgz} -C /tmp
  rm /tmp/#{tomcat_version_name_tgz}
  mv /tmp/#{tomcat_version_name} #{node.tomcat.install_path}
  chown -R #{node.tomcat.run_user}:#{node.tomcat.run_group} #{node.tomcat.install_path}
  chmod -R 755 #{node.tomcat.install_path}
  rm -rf #{node.tomcat.install_path}/webapps/ROOT
EOH
</code></pre>

<p>end
```
Notice that they very carefully delete that tarball when they are done, ensuring that it will be re-downloaded 30 minutes later on the next run. They also untar the file and then move it to the install location without checking to see if anything is already there.  Again, 30 minutes later the entire process happens again despite whatever is already there.</p>

<p>Now look at what happens with a package repo in place:
<code>ruby
package 'tomcat7' do    
  action :install  
end  
</code>
You may have to customize config files and init scripts, but this is a far simpler and less error prone way to install the base software.</p>

<p>In this case, Chef knows what OS you are using, what your package manager should be, repository connection details and how to install the package. Puppet does the exact same thing. So does every other config management system in the history of ever.  The less code you have to write and the less verification code you have to write, they happier you'll be and the people who come after you will be.</p>

<h3>The End</h3>

<p>I've heard a lot of complaints from ops and tools folks that devs do "crazy" stuff and they are much affronted that the devs don't seem to understand the unpublished rules of operationalizing apps and the best way to use tools, and omg did you see the travesty of a Tomcat cookbook they wrote?</p>

<p>I have spent years on ops teams, tools teams and automation teams now. I have been one of those self-righteous, affronted peeps.  This behavior doesn't scale, yo.</p>

<p>One of the best messages that DevOps has for all of us is, if you don't like the way someone's doing something, talk to them and find out why. You'll probably learn that there were great reasons for everything, including "I didn't know how to do it, Chef is hard, Tomcat is hard, and I was just a Java developer until you guys started making me do all this automation stuff without telling me the rules or offering guidelines, so I copied another team's Tomcat cookbook. I had no idea it's crap. It installs Tomcat and that's all I care about."</p>

<p>Indeed. That's all they care about. If you care about more than just the install, maybe you should reach out and offer to partner with them on the parts you care about.  Don't like the way devs are building application infrastructure? Well maybe you should do it for them. Provide them with a consistant VM build from a stable package repo and possibly infrastructure cookbooks with sane defaults and overrideable parameters. Chances are good devs don't like recreating that crappy Tomcat wheel any more than you like them doing it. It's likely they will be pathetically grateful because, while they are coping with the tasks they've been handed, they don't really know what to do in detail and researching JVM tuning parameters is not their idea of a good time.</p>

<p>Why am I telling you this story? Because I believe that a major piece of your infrastructure stability is created with package repos. Making them easy to find, use and contribute to will help smooth any number of peripheral problems you are trying to solve.  In my next post I'll talk about practical considerations for repositories, packages and toolchains.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pieces and Parts: Managing Your Ruby Toolchain (part 1)]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/05/12/pieces-and-parts-managing-your-ruby-toolchain/"/>
    <updated>2013-05-12T13:12:00-07:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/05/12/pieces-and-parts-managing-your-ruby-toolchain</id>
    <content type="html"><![CDATA[<p>I recently received an email from someone who attended my <a href="http://www.youtube.com/watch?v=pHmU0aNkENc&amp;list=PLrmstJpucjzXNMLcI5X-EjirpDd-SITd3&amp;index=28">ChefConf talk</a> and asked me to expand on a few things. As I started to answer the email, I could see it was going to turn into a dissertation, so I migrated it over into a blog post.  As I started to write the blog post, it seemed to grow into a book, so now I've decided to break it down into multiple posts.  In this post I'll try to summarize the question and situational environment and cover the easiest answers first: scripting languages and RVM.</p>

<p><strong>The Question</strong><br/>
Given the dynamic nature of Ruby tooling and the uncertainty of internet connections, and given that I work in the Enterprise, how should I design my supporting infrastructure and should I make Ruby my default scripting language?</p>

<p><strong>The Situation</strong><br/>
Situated in the Enterprise, working with Red Hat/CentOS Enterprise Linux(EL).</p>

<p><strong>Concerns</strong>  <br/>
* Rapidly changing versions of gems and software on the internet<br/>
* A constant need to download and compile Ruby (also compilers in production)<br/>
* The dynamic nature of downloading an RVM script from the internet on every install<br/>
* No connection to the internet (I'm not sure if this was a concern of his, but I'm betting it's one of yours)</p>

<p>Let's look at our major parts, shall we? In this set of posts we'll cover <br/>
* <a href="#script">Scripting Languages</a> <br/>
* <a href="#rvm">RVM</a><br/>
* [Package Repositories]  <br/>
* [Package Versions]   <br/>
* [Ruby Management]     <br/>
* [Rubygems]</p>

<p><a id="script"><strong>Scripting Languages</strong></a><br/>
The question was, should we go all in on Ruby as a scripting language? My answer to that is, unless everyone loves Ruby, that's probably an unnecessary hardship to impose while also trying to adopt Chef.  Generally you find some combination of Shell, Python, Perl or Ruby on most enterprise server systems. I think you should script in the language that works best for you, where "works best" is a combination of what you're comfortable with and what will best suit your immediate need.</p>

<p>Honestly I think we'll never move entirely away from Shell scripting and that's ok. It's easy to learn and suits functional tasks like cron jobs and other server-specific work. Do I think you should have a script suite in 4 different interpreted languages? Well, no. If it were me, I'd pick Shell and Ruby for my options. But there's no reason it can't be Shell and Python or any other combo.</p>

<p>Me? I love Ruby and have an irrational dislike of Perl that stems from my early days in ops dealing with travesties of unreadable scripts. So I like Ruby first and Shell second, Python third and Perl never.  But it's hard enough learning a new tool like Chef. Don't impose artificial constraints on your team.</p>

<p>Also, Your devs are probably already programming in Java or C or whatever. Over time most devs pick up a smattering of shell. If you force Ruby on them too it's likely to breed resentment.</p>

<p><a id="rvm"><strong>RVM</strong></a> <br/>
While I'm not an expert on <a href="http://rvm.io">RVM</a> and other Ruby managers, I have heard that it's not meant to be a server tool.  I do use RVM for workstation development and I've used <a href="http://github.com/sstephenson/rbenv/wiki">Rbenv</a> as well. I don't mind compiling Ruby from scratch when installing it locally although I will love it when RVM gets precompiled rubies for OSX.</p>

<h5>A Slight Digression on Workstation Automation</h5>

<p>I've written workstation automation using Fletcher Nichol's <a href="http://github.com/fnichol/chef-rvm">chef-rvm cookbook</a>.  A frustrating problem I have run into is that RVM undergoes frequent development and at first I had people coming to me because the workstation toolchain install wouldn't work and it was almost always because the RVM version had changed and something was now wonky in the settings or install chain. So I started pinning the RVM version to install with occasional revisits to bump the version when I could.</p>

<p>If you want to look at workstation automation for OSX 10.8 try a couple of these repos:</p>

<ul>
<li><a href="http://github.com/pivotal-sprout/sprout-wrap">Sprout-wrap</a> - This used to be Pivotal Workstation and is now basically an instruction page for getting going with Soloist</li>
<li><a href="http://www.solowizard.com">SoloWizard</a> - a browser based checklist that will assemble a chef solo provisioner for your workstation.</li>
<li>Joshua Timberman's workstation-chef-repo and mac_os_x-cookbook for his personal collection of workstation automation</li>
<li><a href="http://github.com/blt04/puppet-rvm">Puppet-RVM</a> - Puppet module for installing and managing RVM</li>
<li><a href="http://boxen.github.com/">Boxen</a> - A tool for automating OSX with Puppet. Links to a blog post with details.</li>
</ul>


<p>I have written workstation automation but I don't maintain it these days and I'll probably try Soloist when I get my next new Mac.</p>

<p><strong>TL;DR</strong>:<br/>
* Use RVM on workstations not servers  <br/>
* If you're automating for many people over time, pin your RVM version</p>

<p><strong>Wrap Up</strong>
To keep the blog post readable, this is all I want to discuss in this first post, but I'm about to publish Part 2 as well: a rant about package repos. I'm extremely interested in feedback on this series as I was only half joking about writing a book, though it would likely be an online doc of some kind. This type of discussion evolves too quickly to commit to paper.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minneapolis - St Paul Infracoders Meetup Recap]]></title>
    <link href="http://blog.brattyredhead.com/blog/2013/05/07/minneapolis-st-paul-infracoders-meetup-recap/"/>
    <updated>2013-05-07T10:34:00-07:00</updated>
    <id>http://blog.brattyredhead.com/blog/2013/05/07/minneapolis-st-paul-infracoders-meetup-recap</id>
    <content type="html"><![CDATA[<p>Last night we had a fun second meetup of the <a href="http://www.meetup.com/Twin-Cities-Infracoders">Twin Cities Infracoders group</a>.  On the docket were presentations and demos for Vagrant and Sensu.  We had about 18 people show up and a lively discussion ensued on why you'd want to use something like Vagrant and implementation strategies.</p>

<p>Most of us have partnered with development teams who have asked for things that are difficult to provide or unwise and one of the best use cases for Vagrant is the ability to hand someone a development environment homogenous to the team and easy to troubleshoot. It's homogenous because everyone uses the same base OS box file and also uses the same provisioner to create the environment, whether that's Chef, Puppet or Bash scripts or anything else. It also shortens time required to bootstrap a new team member.</p>

<p><a href="http://www.linkedin.com/in/mpgoetz">Mike Goetz</a> and <a href="http://www.linkedin.com/in/thomasduffield">Tom Duffield</a> gave us a great compressed Wordpress install demo on a local VM with Vagrant and Chef. Then they gave us a second demo of spinning up two ec2 instances to separate the front and back end pieces of Wordpress.</p>

<p>After Vagrant, we ran through some Sensu slides and looked at some basic info about Sensu.  There were technical difficulties around the demos we were working on so demoing was minimal but discussion around why Sensu, how Sensu and when you might switch was great and we're looking forward to a more detailed demo at next month's meetup.</p>

<h5>Here is the collection of tools and links from last night:</h5>

<p><a href="http://www.vagrantup.com/">Vagrant</a><br/>
<a href="http://docs.vagrantup.com/v2/plugins/index.html">Vagrant Plugins</a><br/>
<a href="http://sensuapp.org/">Sensu</a><br/>
<a href="http://slides.sensuapp.org/">Sean Porter's Slides</a><br/>
Wordpress Demo(this link will be available shortly)</p>

<h5>Coming up:</h5>

<p>Next month's meetup, hosted again at the Nerdery, will be a presentation on using Selenium for automated testing and QA as well as our enhanced Sensu Server and client nodes deployed with Vagabond on LXCs inside a Vagrant VM.  I hope we get a great turnout.</p>

<p>On another note, I have been talking lately about how I want to organize a Chef hackday. After last night's discussions around tooling and workflow, I think it might be nice to instead do a tool-agnostic Workflow Tooling hack and help day. Many of us have gotten workflows configured successfully, but depending on your experience beating on the Ruby toolchain, it can be challenging the first couple times you do it.  The Nerdery said they would probably be willing to host and I was thinking about asking CoCo Minneapolis if they had any interest in hosting.</p>

<p>I'll post up a question in the meetup group about location and date preferences to see if I get enough interest to make it a thing. I'll also send someone to shill at the monthly DevOps meetup that I can never attend due to my work travel schedule.</p>

<p>If you haven't made it out to an Infracoder meetup yet, I hope you because we are having some great tech discussions and getting to hear about other people's uses cases for things is fascinating. Also, the Nerdery takes super great care of us and feeds us Pizza for dinner.</p>
]]></content>
  </entry>
  
</feed>
